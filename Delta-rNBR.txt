// *********************************************************************************************************************************************************
//              Delta-rNBR Forest Canopy Disturbance Mapping Approach (Version 1.5)
// *********************************************************************************************************************************************************
// 
//  * Project:  ReCaREDD - JRC of the European Commission
//  *
//  * Purpose:  - Mapping all kind of canopy disturbances (natural or human induced) within (semi-)evergreen forests
//  *           - Disturbances can be interpreted as forest degradation events (after threshold -e.g. 0.02- is applied to separate signal from noise)
//  *           - In order to separate natural from human disturbances we recommend manual screening of the data by an experienced human interpreter
//  *           - Close to real time monitoring of canopy cover changes possible
//  *
//  * Info:     - SR-TOA Combination (SR data with 'simpleCloudScore' band coming from TOA data)
//  *           - Basic methodology described in the paper published in the Remote Sensing journal:   http://www.mdpi.com/2072-4292/10/4/544
//  *           - Updates to the GEE script (development versions and script manual):                 https://github.com/Andi1974/Forest-degradation-monitoring 
//  *           - Updates to the GEE script (latest archived version):                                https://doi.org/10.5281/zenodo.1014728
//  *           - Further information and pre-processed data:                                         http://forobs.jrc.ec.europa.eu/recaredd/
//  *
//  * Author:   Andreas Langner (SvB)
//  * Email:    andi.langner@gmail.com, andreas-johannes.langner@ec.europa.eu
//
//**********************************************************************************************************************************************************



// *********************************************************************************************************************************************************
// Definition of user interface (for input of the user in a GUI) *******************************************************************************************
// *********************************************************************************************************************************************************

Map.style().set('cursor', 'hand');

var panel = ui.Panel();
panel.style().set({
  width: '400px',
  position: 'bottom-right',
  border : '1px solid #000000',
});

var Header = ui.Label('Delta-rNBR Parameters:',{fontWeight: 'bold', fontSize: '20px', textAlign: 'center'});
var Subheader1 = ui.Label('Investigation periods:',{fontWeight: 'bold'});
var label_Start_base_select = ui.Label('Start of base period:');
var Start_base_select = ui.Textbox({
  value: '2016-01-01',
  style: {width : '90px'},
  onChange: function(text) {
    var Start_base = text
  }
});
var label_End_base_select = ui.Label('End of base period:');
var End_base_select = ui.Textbox({
  value: '2016-12-31',
  style: {width : '90px'},
  onChange: function(text) {
    var End_base = text
  }
})
var label_Start_second_select = ui.Label('Start of second period:');
var Start_second_select = ui.Textbox({
  value: '2017-01-01',
  style: {width : '90px'},
  onChange: function(text) {
    var Start_second = text
  }
});
var label_End_second_select = ui.Label('End of second period:');
var End_second_select = ui.Textbox({
  value: '2017-12-31',
  style: {width : '90px', textAlign: 'right'},
  onChange: function(text) {
    var End_second = text
  }
});
var label_Sensor_select = ui.Label('Sensor selection:',{fontWeight: 'bold'});
var Sensor_select = ui.Select({
  items: [
    {label: 'Landsat 8', value: 'L8'},{label: 'Landsat 7', value: 'L7'},{label: 'Landsat 5', value: 'L5'},{label: 'Landsat 4', value: 'L4'},
    {label: 'Landsat 7/8', value: 'L78'},{label: 'Landsat 5/7', value: 'L57'},{label: 'Landsat 4/5', value: 'L45'},{label: 'Sentinel 2', value: 'S2'}],
  value: 'L8',
  onChange: function(value) {
    var Sensor = value
  },
  style: {width: '200px'}
});
var improve_L7_select = ui.Checkbox({
  label: 'Improve Landsat 7',
  value: true,
  onChange: function(value) {
    var improve_L7 = value
  }
});
var label_improve_threshold_select = ui.Label('Improving threshold Landsat 7 (0 - 0.3):');
var improve_threshold_select = ui.Slider({
  min: 0,
  max: 0.3, 
  value: 0.08, 
  step: 0.001,
  onChange: function(value) {
    var improve_threshold = value
  },
  style: {width: '380px'}
});
var label_sensorerror_bufferdistance_select = ui.Label('Buffer distance for sensor errors (0 - 10 pixel):');
var sensorerror_bufferdistance_select = ui.Slider({
  min: 0,
  max: 10, 
  value: 1, 
  step: 1,
  onChange: function(value) {
    var sensorerror_bufferdistance = value
  },
  style: {width: '380px'}
});
var label_countryname_select = ui.Label('Country or AOI selection:',{fontWeight: 'bold'});
var countryname_select = ui.Select({
  items: [
    {label:'Aruba', value:'AA'},{label:'Antigua and Barbuda', value:'AC'},{label:'United Arab Emirates', value:'AE'},
    {label:'Afghanistan', value:'AF'},{label:'Algeria', value:'AG'},{label:'Azerbaijan', value:'AJ'},{label:'Albania', value:'AL'},
    {label:'Armenia', value:'AM'},{label:'Andorra', value:'AN'},{label:'Angola', value:'AO'},{label:'American Samoa', value:'AQ'},
    {label:'Argentina', value:'AR'},{label:'Australia', value:'AS'},{label:'Ashmore and Cartier Islands', value:'AT'},
    {label:'Austria', value:'AU'},{label:'Anguilla', value:'AV'},{label:'Akrotiri', value:'AX'},{label:'Antarctica', value:'AY'},
    {label:'Bahrain', value:'BA'},{label:'Barbados', value:'BB'},{label:'Botswana', value:'BC'},{label:'Bermuda', value:'BD'},
    {label:'Belgium', value:'BE'},{label:'Bahamas, The', value:'BF'},{label:'Bangladesh', value:'BG'},{label:'Belize', value:'BH'},
    {label:'Bosnia and Herzegovina', value:'BK'},{label:'Bolivia', value:'BL'},{label:'Burma', value:'BM'},{label:'Benin', value:'BN'},
    {label:'Belarus', value:'BO'},{label:'Solomon Islands', value:'BP'},{label:'Navassa Island', value:'BQ'},{label:'Brazil', value:'BR'},
    {label:'Bassas da India', value:'BS'},{label:'Bhutan', value:'BT'},{label:'Bulgaria', value:'BU'},{label:'Bouvet Island', value:'BV'},
    {label:'Brunei', value:'BX'},{label:'Burundi', value:'BY'},{label:'Canada', value:'CA'},{label:'Cambodia', value:'CB'},
    {label:'Chad', value:'CD'},{label:'Sri Lanka', value:'CE'},{label:'Congo (Brazzaville)', value:'CF'},
    {label:'Congo (Kinshasa)', value:'CG'},{label:'China', value:'CH'},{label:'Chile', value:'CI'},{label:'Cayman Islands', value:'CJ'},
    {label:'Cocos (Keeling) Islands', value:'CK'},{label:'Cameroon', value:'CM'},{label:'Comoros', value:'CN'},
    {label:'Colombia', value:'CO'},{label:'Northern Mariana Islands', value:'CQ'},{label:'Coral Sea Islands', value:'CR'},
    {label:'Costa Rica', value:'CS'},{label:'Central African Republic', value:'CT'},{label:'Cuba', value:'CU'},
    {label:'Cape Verde', value:'CV'},{label:'Cook Islands', value:'CW'},{label:'Cyprus', value:'CY'},{label:'Denmark', value:'DK'},
    {label:'Djibouti', value:'DJ'},{label:'Dominica', value:'DO'},{label:'Jarvis Island', value:'DQ'},
    {label:'Dominican Republic', value:'DR'},{label:'Dhekelia', value:'DX'},{label:'Ecuador', value:'EC'},{label:'Egypt', value:'EG'},
    {label:'Ireland', value:'EI'},{label:'Equatorial Guinea', value:'EK'},{label:'Estonia', value:'EN'},{label:'Eritrea', value:'ER'},
    {label:'El Salvador', value:'ES'},{label:'Ethiopia', value:'ET'},{label:'Europa Island', value:'EU'},
    {label:'Czech Republic', value:'EZ'},{label:'French Guiana', value:'FG'},{label:'Finland', value:'FI'},{label:'Fiji', value:'FJ'},
    {label:'Falkland Islands (Islas Malvinas)', value:'FK'},{label:'Micronesia, Federated States of', value:'FM'},{label:'Faroe Islands', value:'FO'},
    {label:'French Polynesia', value:'FP'},{label:'Baker Island', value:'FQ'},{label:'France', value:'FR'},
    {label:'French Southern and Antarctic Lands', value:'FS'},{label:'Gambia, The', value:'GA'},{label:'Gabon', value:'GB'},
    {label:'Georgia', value:'GG'},{label:'Ghana', value:'GH'},{label:'Gibraltar', value:'GI'},{label:'Grenada', value:'GJ'},
    {label:'Guernsey', value:'GK'},{label:'Greenland', value:'GL'},{label:'Germany', value:'GM'},{label:'Glorioso Islands', value:'GO'},
    {label:'Guadeloupe', value:'GP'},{label:'Guam', value:'GQ'},{label:'Greece', value:'GR'},{label:'Guatemala', value:'GT'},
    {label:'Guinea', value:'GV'},{label:'Guyana', value:'GY'},{label:'Gaza Strip', value:'GZ'},{label:'Haiti', value:'HA'},
    {label:'Hong Kong', value:'HK'},{label:'Heard Island and McDonald Islands', value:'HM'},{label:'Honduras', value:'HO'},
    {label:'Howland Island', value:'HQ'},{label:'Croatia', value:'HR'},{label:'Hungary', value:'HU'},{label:'Iceland', value:'IC'},
    {label:'Indonesia', value:'ID'},{label:'Isle of Man', value:'IM'},{label:'India', value:'IN'},
    {label:'British Indian Ocean Territory', value:'IO'},{label:'Clipperton Island', value:'IP'},{label:'Iran', value:'IR'},
    {label:'Israel', value:'IS'},{label:'Italy', value:'IT'},{label:'Cote de Ivoire', value:'IV'},{label:'Iraq', value:'IZ'},
    {label:'Japan', value:'JA'},{label:'Jersey', value:'JE'},{label:'Jamaica', value:'JM'},{label:'Jan Mayen', value:'JN'},
    {label:'Jordan', value:'JO'},{label:'Johnston Atoll', value:'JQ'},{label:'Juan de Nova Island', value:'JU'},{label:'Kenya', value:'KE'},
    {label:'Kyrgyzstan', value:'KG'},{label:'Korea, North', value:'KN'},{label:'Kingman Reef', value:'KQ'},{label:'Kiribati', value:'KR'},
    {label:'Korea, South', value:'KS'},{label:'Christmas Island', value:'KT'},{label:'Kuwait', value:'KU'},{label:'Kosovo', value:'KV'},
    {label:'Kazakhstan', value:'KZ'},{label:'Laos', value:'LA'},{label:'Lebanon', value:'LE'},{label:'Latvia', value:'LG'},
    {label:'Lithuania', value:'LH'},{label:'Liberia', value:'LI'},{label:'Slovakia', value:'LO'},{label:'Palmyra Atoll', value:'LQ'},
    {label:'Liechtenstein', value:'LS'},{label:'Lesotho', value:'LT'},{label:'Luxembourg', value:'LU'},{label:'Libya', value:'LY'},
    {label:'Madagascar', value:'MA'},{label:'Martinique', value:'MB'},{label:'Macau', value:'MC'},{label:'Moldova', value:'MD'},
    {label:'Mayotte', value:'MF'},{label:'Mongolia', value:'MG'},{label:'Montserrat', value:'MH'},{label:'Malawi', value:'MI'},
    {label:'Montenegro', value:'MJ'},{label:'Macedonia', value:'MK'},{label:'Mali', value:'ML'},{label:'Monaco', value:'MN'},
    {label:'Morocco', value:'MO'},{label:'Mauritius', value:'MP'},{label:'Midway Islands', value:'MQ'},{label:'Mauritania', value:'MR'},
    {label:'Malta', value:'MT'},{label:'Oman', value:'MU'},{label:'Maldives', value:'MV'},{label:'Mexico', value:'MX'},
    {label:'Malaysia', value:'MY'},{label:'Mozambique', value:'MZ'},{label:'New Caledonia', value:'NC'},{label:'Niue', value:'NE'},
    {label:'Norfolk Island', value:'NF'},{label:'Niger', value:'NG'},{label:'Vanuatu', value:'NH'},{label:'Nigeria', value:'NI'},
    {label:'Netherlands', value:'NL'},{label:'Sint Maarten', value:'NN'},{label:'Norway', value:'NO'},{label:'Nepal', value:'NP'},
    {label:'Nauru', value:'NR'},{label:'Suriname', value:'NS'},{label:'Nicaragua', value:'NU'},{label:'New Zealand', value:'NZ'},
    {label:'South Sudan', value:'OD'},{label:'Paraguay', value:'PA'},{label:'Pitcairn Islands', value:'PC'},{label:'Peru', value:'PE'},
    {label:'Paracel Islands', value:'PF'},{label:'Spratly Islands', value:'PG'},{label:'Etorofu, Habomai, Kunashiri, and Shikotan Islands', value:'PJ'},
    {label:'Pakistan', value:'PK'},{label:'Poland', value:'PL'},{label:'Panama', value:'PM'},{label:'Portugal', value:'PO'},
    {label:'Papua New Guinea', value:'PP'},{label:'Palau', value:'PS'},{label:'Guinea-Bissau', value:'PU'},{label:'Qatar', value:'QA'},
    {label:'Reunion', value:'RE'},{label:'Serbia', value:'RI'},{label:'Marshall Islands', value:'RM'},{label:'Saint Martin', value:'RN'},
    {label:'Romania', value:'RO'},{label:'Philippines', value:'RP'},{label:'Puerto Rico', value:'RQ'},{label:'Russia', value:'RS'},
    {label:'Rwanda', value:'RW'},{label:'Saudi Arabia', value:'SA'},{label:'Saint Pierre and Miquelon', value:'SB'},
    {label:'Saint Kitts and Nevis', value:'SC'},{label:'Seychelles', value:'SE'},{label:'South Africa', value:'SF'},
    {label:'Senegal', value:'SG'},{label:'Saint Helena, Ascension, and Tristan da Cunha', value:'SH'},{label:'Slovenia', value:'SI'},
    {label:'Sierra Leone', value:'SL'},{label:'San Marino', value:'SM'},{label:'Singapore', value:'SN'},{label:'Somalia', value:'SO'},
    {label:'Spain', value:'SP'},{label:'Saint Lucia', value:'ST'},{label:'Sudan', value:'SU'},{label:'Svalbard', value:'SV'},
    {label:'Sweden', value:'SW'},{label:'South Georgia and South Sandwich Islands', value:'SX'},{label:'Syria', value:'SY'},
    {label:'Switzerland', value:'SZ'},{label:'Saint Barthelemy', value:'TB'},{label:'Trinidad and Tobago', value:'TD'},
    {label:'Tromelin Island', value:'TE'},{label:'Thailand', value:'TH'},{label:'Tajikistan', value:'TI'},
    {label:'Turks and Caicos Islands', value:'TK'},{label:'Tokelau', value:'TL'},{label:'Tonga', value:'TN'},{label:'Togo', value:'TO'},
    {label:'Sao Tome and Principe', value:'TP'},{label:'Tunisia', value:'TS'},{label:'Timor-Leste', value:'TT'},
    {label:'Turkey', value:'TU'},{label:'Tuvalu', value:'TV'},{label:'Taiwan', value:'TW'},{label:'Turkmenistan', value:'TX'},
    {label:'Tanzania', value:'TZ'},{label:'Ukraine', value:'UA'},{label:'Curasao', value:'UC'},{label:'Uganda', value:'UG'},
    {label:'United Kingdom', value:'UK'},{label:'United States', value:'US'},{label:'Burkina Faso', value:'UV'},
    {label:'Uruguay', value:'UY'},{label:'Uzbekistan', value:'UZ'},{label:'Saint Vincent and the Grenadines', value:'VC'},
    {label:'Venezuela', value:'VE'},{label:'British Virgin Islands', value:'VI'},{label:'Vietnam', value:'VM'},
    {label:'United States Virgin Islands', value:'VQ'},{label:'Vatican City', value:'VT'},{label:'Namibia', value:'WA'},
    {label:'West Bank', value:'WE'},{label:'Wallis and Futuna', value:'WF'},{label:'Wake Island', value:'WQ'},{label:'Samoa', value:'WS'},
    {label:'Swaziland', value:'WZ'},{label:'Yemen', value:'YM'},{label:'Zambia', value:'ZA'},{label:'Zimbabwe', value:'ZI'}],
value: 'CB',
  onChange: function(value) {
    var countryname = value
  },
  style: {width: '200px'}
});
var AOI_selection = ui.Checkbox({
  label: 'Use AOI (polygon) instead of country',  
  value: false,
  onChange: function(value) {
    var AOI_selection = value
  }
});
var center_select = ui.Checkbox({
  label: 'Center on selected area',  
  value: true,
  onChange: function(value) {
    var center = value
  }
});
var label_zoomlevel_select = ui.Label('Zoomlevel under center option (1 - 24):');
var zoomlevel_select = ui.Slider({
  min: 1,
  max: 24, 
  value: 8, 
  step: 1,
  onChange: function(value) {
    var zoomlevel = value
  },
  style: {width: '380px'}
});
var cloudmasking = ui.Label('Parameters for cloud masking:',{fontWeight: 'bold'});
var cloud_pixel_qa_selection = ui.Checkbox({
  label: 'Cloud flag (Pixel-QA band)', 
  value: true,
  onChange: function(value) {
    var cloud_pixel_qa_select = value
  }
});
var cloud_shadow_pixel_qa_selection = ui.Checkbox({
  label: 'Cloud-shadow flag (Pixel-QA band)', 
  value: true,
  onChange: function(value) {
    var cloud_shadow_pixel_qa_select = value
  }
});
var cloud_conf_qa_selection = ui.Checkbox({
  label: 'Cloud-confidence flag (Pixel-QA band)', 
  value: true,
  onChange: function(value) {
    var cloud_conf_qa_select = value
  }
});
var cirrus_conf_qa_selection = ui.Checkbox({
  label: 'Cirrus-confidence flag (Pixel-QA band)', 
  value: true,
  onChange: function(value) {
    var cirrus_conf_qa_select = value
  }
});
var cloud_shadow_sr_cloud_qa_selection  = ui.Checkbox({
  label: 'Cloud-shadow flag (SR-Cloud-QA band)', 
  value: true,
  onChange: function(value) {
    var cloud_shadow_sr_cloud_qa_select = value
  }
});
var SimpleCloudScore_selection = ui.Checkbox({
  label: 'SimpleCloudScore flag V1 (SimpleCloudScore ToA)', 
  value: true,
  onChange: function(value) {
    var SimpleCloudScore_select = value
  }
});
var UnsureClouds_selection  = ui.Checkbox({
  label: 'SimpleCloudScore flag V2 (SimpleCloudScore ToA)', 
  value: true,
  onChange: function(value) {
    var UnsureClouds_select = value
  }
});
var label_cloud_buffer_select = ui.Label('Cloud buffer (0 - 2,500 meters):');
var cloud_buffer_select = ui.Slider({
  min: 0,
  max: 2500, 
  value: 500, 
  step: 10,
  onChange: function(value) {
    var cloud_buffer = value
  },
  style: {width: '380px'}
});
var Label_forest_mask_selection = ui.Label('Forest mask selection:',{fontWeight: 'bold'});
var forest_mask_selection  = ui.Select({
  items: [
    {label: 'No forest mask', value: 'No_forest_map'},{label: 'Roadless mask (2014 - 2016) (not yet public)', value: 'Roadless_map'},
    {label: 'Hansen map (2012 - 2016)', value: 'Hansen_map'}],
  value: 'Hansen_map',
  onChange: function(value) {
    var forest_mask_select = value
  },
  style: {width: '200px'}
});
var label_forest_mask_year_selection = ui.Label('Year of forest mask (2012 - 2016):');
var forest_mask_year_selection = ui.Slider({
  min: 2012,
  max: 2016, 
  value: 2016, 
  step: 1,
  onChange: function(value) {
    var forest_mask_year_select = value
  },
  style: {width: '380px'}
});
var label_hansen_treecover_selection = ui.Label('Select Hansen treecover percentage (0 - 100%):');
var hansen_treecover_selection = ui.Slider({
  min: 0,
  max: 100, 
  value: 70, 
  step: 1,
  onChange: function(value) {
    var hansen_treecover = value
  },
  style: {width: '380px'}
});
var label_selfreferencing_1 = ui.Label('Self-referencing step:',{fontWeight: 'bold'});
var label_selfreferencing_2 = ui.Label('Radius of circular kernel (0 - 1,000 meters):');
var kernel_size_selection = ui.Slider({
  min: 0,
  max: 1000, 
  value: 210, 
  step: 10,
  onChange: function(value) {
    var kernel_size = value
  },
  style: {width: '380px'}
});
var label_cleaning_select = ui.Label('Disturbance-density-related (DDR) filtering:',{fontWeight: 'bold'});
var cleaning_selection  = ui.Checkbox({
  label: 'Apply DDR filtering', 
  value: false,
  onChange: function(value) {
    var cleaning_select = value
  }
});
var label_threshold_conservative_selection = ui.Label('Select threshold for filtering (0 - 0.3):');
var threshold_conservative_selection = ui.Slider({
  min: 0,
  max: 0.3, 
  value: 0.02, 
  step: 0.001,
  onChange: function(value) {
    var threshold_conservative = value
  },
  style: {width: '380px'}
});
var label_kernel_clean_size_selection = ui.Label('Radius of circular kernel for filtering (0 - 500 meters):');
var kernel_clean_size_selection = ui.Slider({
  min: 10,
  max: 500, 
  value: 60, 
  step: 10,
  onChange: function(value) {
    var kernel_clean_size = value
  },
  style: {width: '380px'}
});
var label_min_disturbances = ui.Label('Min. number of disturbance events per cleaning kernel:');
var min_disturbances_selection = ui.Slider({
  min: 1,
  max: 50, 
  value: 4, 
  step: 1,
  onChange: function(value) {
    var min_disturbances = value
  },
  style: {width: '380px'}
});
var label_exporting = ui.Label('Options for export:',{fontWeight: 'bold'});
var export_selection = ui.Checkbox({
  label: 'Allow export of Delta-rNBR result(s)', 
  value: false,
  onChange: function(value) {
    var export_select = value
  }
});
var export_selection_singleNBRs = ui.Checkbox({
  label: 'Export of single rNBRs', 
  value: false,
  onChange: function(value) {
    var export_select_singleNBRs = value
  }
});
var export_selection_singleNBRdates = ui.Checkbox({
  label: 'Export of dates of single rNBRs', 
  value: false,
  onChange: function(value) {
    var export_select_singleNBRdates = value
  }
});

panel.add(Header);
panel.add(Subheader1);
panel.add(label_Start_base_select);
panel.add(Start_base_select);
panel.add(label_End_base_select);
panel.add(End_base_select);
panel.add(label_Start_second_select);
panel.add(Start_second_select);
panel.add(label_End_second_select);
panel.add(End_second_select);
panel.add(label_Sensor_select);
panel.add(Sensor_select);
panel.add(improve_L7_select);
panel.add(label_improve_threshold_select);
panel.add(improve_threshold_select);
panel.add(label_sensorerror_bufferdistance_select);
panel.add(sensorerror_bufferdistance_select);
panel.add(label_countryname_select);
panel.add(countryname_select);
panel.add(AOI_selection);
panel.add(center_select);
panel.add(label_zoomlevel_select);
panel.add(zoomlevel_select);
panel.add(cloudmasking);
panel.add(cloud_pixel_qa_selection);
panel.add(cloud_shadow_pixel_qa_selection);
panel.add(cloud_conf_qa_selection);
panel.add(cirrus_conf_qa_selection);
panel.add(cloud_shadow_sr_cloud_qa_selection);
panel.add(SimpleCloudScore_selection);
panel.add(UnsureClouds_selection);
panel.add(label_cloud_buffer_select);
panel.add(cloud_buffer_select);
panel.add(Label_forest_mask_selection);
panel.add(forest_mask_selection);
panel.add(label_forest_mask_year_selection);
panel.add(forest_mask_year_selection);
panel.add(label_hansen_treecover_selection);
panel.add(hansen_treecover_selection);
panel.add(label_selfreferencing_1);
panel.add(label_selfreferencing_2);
panel.add(kernel_size_selection);
panel.add(label_cleaning_select);
panel.add(cleaning_selection);
panel.add(label_threshold_conservative_selection);
panel.add(threshold_conservative_selection);
panel.add(label_kernel_clean_size_selection);
panel.add(kernel_clean_size_selection);
panel.add(label_min_disturbances);
panel.add(min_disturbances_selection)
panel.add(label_exporting);
panel.add(export_selection);
panel.add(export_selection_singleNBRs);
panel.add(export_selection_singleNBRdates)

ui.root.add(panel);

var button = ui.Button('Run Delta-rNBR');
button.style().set({
  position: 'top-center',
  border : '1px solid #000000',
});
Map.add(button);

// *********************************************************************************************************************************************************
// End of the user interface section (for input of the user in a GUI) **************************************************************************************
// *********************************************************************************************************************************************************



// *********************************************************************************************************************************************************
// Functions of the script *********************************************************************************************************************************
// *********************************************************************************************************************************************************

button.onClick(function() {
    Map.clear();
    Map.add(button);
    var Start_base = Start_base_select.getValue();
    var End_base = End_base_select.getValue();
    var Start_second = Start_second_select.getValue();
    var End_second = End_second_select.getValue();
    var Sensor = Sensor_select.getValue();
    var improve_L7 = improve_L7_select.getValue();
    var improve_threshold = improve_threshold_select.getValue();
    var sensorerror_bufferdistance = sensorerror_bufferdistance_select.getValue();
    var countryname = countryname_select.getValue();
    var AOI_select = AOI_selection.getValue();
    var center = center_select.getValue();
    var zoomlevel = zoomlevel_select.getValue();
    var cloud_pixel_qa_select = cloud_pixel_qa_selection.getValue();
    var cloud_shadow_pixel_qa_select = cloud_shadow_pixel_qa_selection.getValue();
    var cloud_conf_qa_select = cloud_conf_qa_selection.getValue();
    var cirrus_conf_qa_select = cirrus_conf_qa_selection.getValue();
    var cloud_shadow_sr_cloud_qa_select = cloud_shadow_sr_cloud_qa_selection.getValue();
    var SimpleCloudScore_select = SimpleCloudScore_selection.getValue();
    var UnsureClouds_select = UnsureClouds_selection.getValue();
    var cloud_buffer = cloud_buffer_select.getValue();
    var forest_mask_select = forest_mask_selection.getValue();
    var forest_mask_year_select = forest_mask_year_selection.getValue();
    var hansen_treecover = hansen_treecover_selection.getValue();
    var kernel_size = kernel_size_selection.getValue();
    var cleaning_select = cleaning_selection.getValue();
    var threshold_conservative = threshold_conservative_selection.getValue();
    var kernel_clean_size = kernel_clean_size_selection.getValue();
    var min_disturbances = min_disturbances_selection.getValue();
    var export_select = export_selection.getValue();
    var export_select_singleNBRs = export_selection_singleNBRs.getValue();
    var export_select_singleNBRdates = export_selection_singleNBRdates.getValue();
    

    
    // *********************************************************************************************************************************************************
    // Functions of the script *********************************************************************************************************************************
    // *********************************************************************************************************************************************************
    
    // Roadless map is loaded and displayed ********************************************************************************************************************
    function rgb(r,g,b){
              var bin = r << 16 | g << 8 | b;
              return (function(h){
              return new Array(7-h.length).join("0")+h;
              })(bin.toString(16).toUpperCase());
    }
    
    
    // Joining of SR and TOA collections in order to make combined use of pixel_qa band and simpleCloudScore algorithm (Thanks ot George Azzari) ***************
    function joinLandsatCollections(coll1, coll2){
      
      var eqfilter = ee.Filter.equals({'rightField':'system:time_start',
                                       'leftField':'system:time_start'});
      var join = ee.Join.inner();
      var joined = ee.ImageCollection(join.apply(coll1, coll2, eqfilter));
      
      //Inner join returns a FeatureCollection with a primary and secondary set of properties. Properties are collapsed into different bands of an image.
      return joined.map(function(element){
                          return ee.Image.cat(element.get('primary'), element.get('secondary'));
                        }).sort('system:time_start');
    }
    
    
    // Masking Step 1QB: Masking options for clouds (Landsat 8) ************************************************************************************************
    var Masking_1QB = function(image,cloud_buffer,BANDS,cloud_pixel_qa_select,cloud_shadow_pixel_qa_select,cloud_conf_qa_select,cirrus_conf_qa_select,SimpleCloudScore_select,UnsureClouds_select) {
    
      var NoCloudMask = (image.select(BANDS[0]).eq(0)).and(image.select(BANDS[1]).eq(0));
    
      if (cloud_pixel_qa_select === true){
        var cloud_pixel_qa = image.select('pixel_qa').bitwiseAnd(32).neq(0);
      }
      if (cloud_pixel_qa_select === false){
        var cloud_pixel_qa = NoCloudMask;
      }
      if (cloud_shadow_pixel_qa_select === true){
        var cloud_shadow_pixel_qa = image.select('pixel_qa').bitwiseAnd(8).neq(0);
      }
      if (cloud_shadow_pixel_qa_select === false){
        var cloud_shadow_pixel_qa = NoCloudMask;
      }  
      if (cloud_conf_qa_select === true){
        var cloud_conf_qa = image.select('pixel_qa').bitwiseAnd(64).add(image.select('pixel_qa').bitwiseAnd(128))
                            .interpolate([0, 64, 128, 192], [0, 0, 1, 1], 'clamp').int();
      }
      if (cloud_conf_qa_select === false){
        var cloud_conf_qa = NoCloudMask;
      }   
      if (cirrus_conf_qa_select === true){
        var cirrus_conf_qa = image.select('pixel_qa').bitwiseAnd(256).add(image.select('pixel_qa').bitwiseAnd(512))
                            .interpolate([0, 256, 512, 768], [0, 0, 1, 1], 'clamp').int();
      }
      if (cirrus_conf_qa_select === false){
        var cirrus_conf_qa = NoCloudMask;
      } 
      if (SimpleCloudScore_select === true){
        var SimpleCloudScore = image.select(['cloud']).gte(13);
      }
      if (SimpleCloudScore_select === false){
        var SimpleCloudScore = NoCloudMask;
      }
      if (UnsureClouds_select === true){
        var UnsureClouds = image.select(['cloud']).lt(13).and(image.select(['cloud']).gte(9));//.and(image.select(BANDS[3]).lte(292));
      }
      if (UnsureClouds_select === false){
        var UnsureClouds = NoCloudMask;
      }
      
      var maskedClouds = (NoCloudMask.or(cloud_pixel_qa).or(cloud_shadow_pixel_qa).or(cloud_conf_qa).or(cirrus_conf_qa).or(SimpleCloudScore).or(UnsureClouds)).focal_max(cloud_buffer,'circle','meters',1);
      return image.updateMask((maskedClouds.add(1).unmask(0)).eq(1));
    }
    
    
    // Masking Step S2_1: Masking options for clouds (Sentinel-2) (still will be worked on) ********************************************************************
    // *********************************************************************************************************************************************************
    // Copyright: ThanhGIS/ThanhGEEVN (July 2017)
    // *********************************************************************************************************************************************************
    var Masking_S2_1 = function(image,cloud_buffer,BANDS) {
      var toa = sentinel2toa(image);
      var cloud = sentinelCloudScore(toa);
      var shadow = shadowMask(toa,cloud);
      var mask = cloud.or(shadow).fastDistanceTransform(cloud_buffer,'meters').gt(cloud_buffer);
      return image.updateMask(mask);
    
      // Subfunction of S2 cloud masking
      function sentinel2toa(image) {
        var toa = image.select(['B2','B8','B9','B11','B12'])  
           .divide(10000)
           .set('solar_azimuth',image.get('MEAN_SOLAR_AZIMUTH_ANGLE'))
           .set('solar_zenith', image.get('MEAN_SOLAR_ZENITH_ANGLE'))
        return toa;
      }
    
      // Subfunction of S2 cloud masking
      function sentinelCloudScore(toa) {
        var score = toa.select('B2').multiply(toa.select('B9')).multiply(1e4)
        var cloudScoreThreshold = 135
        var cloud = score.gt(cloudScoreThreshold);
        return cloud;
      }
    
      // Subfunction of S2 cloud masking
      function shadowMask(toa,cloud){
        var azi = ee.Number(toa.get('solar_azimuth'))
        var zen = ee.Number(toa.get('solar_zenith')).multiply(1.6)
        var azimuth =azi.multiply(Math.PI).divide(180.0).add(ee.Number(0.5).multiply(Math.PI));
        var zenith  =ee.Number(0.5).multiply(Math.PI ).subtract(zen.multiply(Math.PI).divide(180.0));
        var nominalScale = cloud.projection().nominalScale();
        var cloudHeights = ee.List.sequence(200,5000,500);
        function cloudH (cloudHeight){
          cloudHeight = ee.Number(cloudHeight);
          var shadowVector = zenith.tan().multiply(cloudHeight);
          var x = azimuth.cos().multiply(shadowVector).divide(nominalScale).round();
          var y = azimuth.sin().multiply(shadowVector).divide(nominalScale).round();
          return cloud.changeProj(cloud.projection(), cloud.projection().translate(x, y));
        }
        var shadows = cloudHeights.map(cloudH);
        var potentialShadow = ee.ImageCollection.fromImages(shadows).max();
        var potentialShadow1 = potentialShadow.and(cloud.not());
        var darkPixels = toa.select(['B8','B11','B12']).reduce(ee.Reducer.sum()).multiply(1e3).lt(250).rename(['dark_pixels']);
        var shadow = potentialShadow1.and(darkPixels).rename('shadows');
        return shadow;
      }
    }
    // *********************************************************************************************************************************************************
    // End Copyright: ThanhGIS/ThanhGEEVN (July 2017)
    // *********************************************************************************************************************************************************
    
    
    // Masking Step 1: Masking options for clouds (any Landsat sensor) *****************************************************************************************
    var Masking_1 = function(image,cloud_buffer,BANDS,cloud_pixel_qa_select,cloud_shadow_pixel_qa_select,cloud_conf_qa_select,cloud_shadow_sr_cloud_qa_select,SimpleCloudScore_select,UnsureClouds_select) {
    
      var NoCloudMask = (image.select(BANDS[0]).eq(0)).and(image.select(BANDS[1]).eq(0));
    
      if (cloud_pixel_qa_select === true){
        var cloud_pixel_qa = image.select('pixel_qa').bitwiseAnd(32).neq(0);
      }
      if (cloud_pixel_qa_select === false){
        var cloud_pixel_qa = NoCloudMask;
      }
      if (cloud_shadow_pixel_qa_select === true){
        var cloud_shadow_pixel_qa = image.select('pixel_qa').bitwiseAnd(8).neq(0);
      }
      if (cloud_shadow_pixel_qa_select === false){
        var cloud_shadow_pixel_qa = NoCloudMask;
      }  
      if (cloud_conf_qa_select === true){
        var cloud_conf_qa = image.select('pixel_qa').bitwiseAnd(64).add(image.select('pixel_qa').bitwiseAnd(128))
                            .interpolate([0, 64, 128, 192], [0, 0, 1, 1], 'clamp').int();
      }
      if (cloud_conf_qa_select === false){
        var cloud_conf_qa = NoCloudMask;
      }   
      if (cloud_shadow_sr_cloud_qa_select === true){
        var cloud_shadow_sr_cloud_qa = image.select('sr_cloud_qa').bitwiseAnd(4).neq(0);
      }
      if (cloud_shadow_sr_cloud_qa_select === false){
        var cloud_shadow_sr_cloud_qa = NoCloudMask;
      } 
      if (SimpleCloudScore_select === true){
        var SimpleCloudScore = image.select(['cloud']).gte(13);
      }
      if (SimpleCloudScore_select === false){
        var SimpleCloudScore = NoCloudMask;
      }
      if (UnsureClouds_select === true){
        var UnsureClouds = image.select(['cloud']).lt(13).and(image.select(['cloud']).gte(9)).and(image.select(BANDS[3]).lte(292));
      }
      if (UnsureClouds_select === false){
        var UnsureClouds = NoCloudMask;
      }
      
      var maskedClouds = (NoCloudMask.or(cloud_pixel_qa).or(cloud_shadow_pixel_qa).or(cloud_conf_qa).or(cloud_shadow_sr_cloud_qa).or(SimpleCloudScore).or(UnsureClouds)).focal_max(cloud_buffer,'circle','meters',1);
      return image.updateMask((maskedClouds.add(1).unmask(0)).eq(1));
    }
    
    
    // Masking Step 2: Masking of sensor errors and non-forest areas *******************************************************************************************
    var Masking_2 = function(image,forest_mask,hansen_treecover,forest_mask_year_select,forest_mask_select,BANDS,sensorerror_bufferdistance) {
    
      var sensorError = (image.select(BANDS[0]).eq(0)).or(image.select(BANDS[1]).eq(0)).or(image.select(BANDS[5]).eq(0)).or(image.select(BANDS[6]).eq(0)).or
                        (image.select(BANDS[7]).eq(0)).or(image.select(BANDS[8]).eq(0)).add(1).unmask(0); // Important to handle SLC error in Landsat 7
      
      var sensorError_buffer = sensorError.focal_min({
        radius: sensorerror_bufferdistance,
        kernelType: 'square',
        units:'pixels',
        iterations: 1})
                        
      if (forest_mask_select === 'No_forest_map'){
        var OUT = image.updateMask(sensorError_buffer.eq(1).and(forest_mask.eq(1)));
      }
      if (forest_mask_select === 'Roadless_map'){
        if (forest_mask_year_select === 2016){
          var OUT = image.updateMask(sensorError_buffer.eq(1).and((forest_mask.gt(10).and(forest_mask.lt(26)))));
        }
        if (forest_mask_year_select === 2015){
          var OUT = image.updateMask(sensorError_buffer.eq(1).and((forest_mask.gt(10).and(forest_mask.lt(26))).or((forest_mask.gt(52).and(forest_mask.lt(54)))).or((forest_mask.gt(62).and(forest_mask.lt(64))))));
        }
        if (forest_mask_year_select === 2014){
          var OUT = image.updateMask(sensorError_buffer.eq(1).and((forest_mask.gt(10).and(forest_mask.lt(26))).or((forest_mask.gt(51).and(forest_mask.lt(54)))).or((forest_mask.gt(61).and(forest_mask.lt(64))))));
        }
      }
      if (forest_mask_select === 'Hansen_map'){
        var OUT = image.updateMask(sensorError_buffer.eq(1)).updateMask(forest_mask.gte(hansen_treecover));
      }
      return OUT;
    };
    
    
    // NBR function, which is applied to all single satellite scenes --> NBR = (NIR-SWIR2)/(NIR+SWIR2) *********************************************************
    var NBR = function(image) {
    
      var d = ee.Date(image.get('system:time_start'));
      var doy =ee.Algorithms.Date(ee.Number(image.get("system:time_start")));
      var yearday=(ee.Number(doy.get('year')).multiply(10000).add(ee.Number(doy.get('month')).multiply(100)).add(ee.Number(doy.get('day'))));
      
      yearday = ee.Image.constant(yearday).toInt32().select([0],['yearday']);
    
      return (image.select('NIR').subtract(image.select('SWIR2'))).
      divide(((image.select('NIR')).add(image.select('SWIR2')))).
      rename(['NBR']).addBands(yearday);
    };
    
    
    // Adjustment kernel function, which self-references each NBR input scene (in order to allow inter-scene comparability) ************************************
    var Adjustment_kernel = function(image,kernel_size) {
      return (image.select('NBR').subtract(image.select('NBR').focal_median(kernel_size,"circle","meters"))).addBands(image.select('yearday')); 
    };
    
    
    // Capping at 0 and -1 (positive values are set to 0; values <= -1 are set to -1 because the latter mainly refer to active fires) **************************
    var Capping = function(image) {
      return ((image.select('NBR').where(image.select('NBR').gt(0),0).where(image.select('NBR').lt(-1),-1)).multiply(-1)).addBands(image.select('yearday')); 
    };

    
    // *********************************************************************************************************************************************************
    
    
    // Definition of study area
    var country = ee.FeatureCollection("USDOS/LSIB/2013").filterMetadata('cc','equals',countryname); // Country border polygons of high accuracy
    var studyarea = country.geometry(); // The study area is set to above selection
    
    if (AOI_select === true){
      var AOI = geometry;
      var country = ee.FeatureCollection("USDOS/LSIB/2013").filterBounds(geometry);
      var studyarea = AOI;
    }
    
    // Preparation of variables for export per Degree-tiles
    var bbox = (studyarea.bounds().coordinates().getInfo());
    var minX = bbox[0][0][0];
    var maxY = bbox[0][3][1];
    var minY = bbox[0][1][1];
    var maxX = bbox[0][1][0];
    
    var min_X = Math.floor(minX);
    var max_X = Math.ceil(maxX);
    var min_Y = Math.floor(minY);
    var max_Y = Math.ceil(maxY);
    
    var Delta_X = max_X - min_X 
    var Delta_Y = max_Y - min_Y
    
    
    // Adjustments according to above user selections
    if (center === true){
      Map.centerObject(studyarea, zoomlevel);
    }
    
    
    if (forest_mask_select === 'No_forest_map'){
      var Hansen_map = ee.Image("UMD/hansen/global_forest_change_2015_v1_3").clip(studyarea);
      var forest_mask = Hansen_map.select('treecover2000').gte(0); // No forest map selected
      Map.addLayer (forest_mask,{},'No Forest map',false);
    }
    
    if (forest_mask_select === 'Roadless_map'){
      var PALETTE = [
    rgb(0,0,0),  rgb(0,0,0), rgb(0,0,0),rgb(0,0,0),rgb(0,0,0),  rgb(0,0,0), rgb(0,0,0),  rgb(0,0,0),    rgb(0,0,0),   rgb(0,0,0), 
    rgb(0,0,0),    // value 10. Undisturbed   (dark green)
    rgb(0,80,0),     // value 11.   Undisturbed forest over the 33 years (1984-2016) (Evergreen/semi-evergreen dense moist forest)
    rgb(0,80,0),     // value 12.   Undisturbed forest with less than 50 valid obs over the 33 years or nodata in one period
    rgb(0,100,0),                 //(temp) value 13.   Undisturbed forest with nodata in 1984-2004
    rgb(0,80,0),                 //(temp) value 14.   Undisturbed forest with one non-green obs in the spectral confusion domain and under the mask (filtred)
    rgb(0,120,0),                 //(temp) value 15.  Degraded forest or open forest
    
    rgb(0,0,0),  rgb(0,0,0), rgb(0,0,0),  rgb(0,0,0),  rgb(0,0,0),    // value 20. Old vegetation regrowth (>10 years)     (green) 
    rgb(30,130,0),     // value 21. Old vegetation regrowth (>20 years) with high disturbance intensity (>3) in (1984-1996)
    rgb(30,130,0),     // value 22. Old vegetation regrowth (>20 years) with low disturbance intensity (1-3) in (1984-1996) 
    rgb(100,160,0),     // value 23. Old vegetation regrowth of 10-20 years, with high disturbance intensity (>3) NEW JUNE
    rgb(100,160,0),     // value 24. Old vegetation regrowth of 10-20 years, with high disturbance intensity (>3) NEW JUNE
    rgb(100,160,0),           //  value 25. Old vegetation regrowth of 10-20 years, with low disturbance intensity (1-3) NEW JUNE
    rgb(100,160,0),           // value 26. Old vegetation regrowth of 10-20 years, with low disturbance intensity (1-3) 
    
     rgb(0,0,0),    rgb(0,0,0),   rgb(0,0,0),    rgb(0,0,0),  // value 30. Young vegetation regrowth (light green)
    rgb(180,210,60),     // val 31. Forest young vegetation regrowth (6 - 10 years) with long (>1 year) disturbance in (2007-2011), forest before (1984-2006) 
    rgb(180,210,60),     // val 32. Forest young vegetation regrowth (6 - 10 years) with short (<1 year) disturbance in (2007-2011), forest before (1984-2006) 
    rgb(180,210,60),     // val 33. Forest young vegetation regrowth (3 - 5 years) with long (>1 year) disturbance in (2007-2013), forest before (1984-2006) 
    rgb(180,210,60),     // val 34. Forest young vegetation regrowth (3 - 5 years) with short (<1 year) disturbance in (2007-2013), forest before (1984-2006) 
    rgb(180,240,80),           // val 35. Young vegetation regrowth (6 - 10 years) with long (>1 year) disturbance in (1984-2011) , non-forest before (1984-2006)
    rgb(180,240,80),           // val 36. Young vegetation regrowth (6 - 10 years) with short (<1 year) disturbance in (1984-2011) , non-forest before (1984-2006) 
    rgb(212,240,168),          // val 37. Young vegetation regrowth (3 - 5 years) with long (>1 year) disturbance in (1984-2013), non-forest before (1984-2006)
    rgb(212,240,168),          // val 38. Young vegetation regrowth (3 - 5 years) with short (<1 year) disturbance in (1984-2013), non-forest before (1984-2006)
    
    rgb(0,0,0),         rgb(0,0,0),         // value 40. Deforestation (2005-2012)  (orange)
    rgb(255,235,30),        // value 41. Recent deforestation (2007-2015), started in 2007
    rgb(255,215,30),        // value 42. Recent deforestation (2007-2015),, started in 2008 
    rgb(255,200,20),        // value 43. Recent deforestation (2007-2015), started in 2009
    rgb(255,180,15),        // value 44. Recent deforestation (2007-2015),, started in 2010
    rgb(255,160,10),        // value 45. Recent deforestation (2007-2015), started in 2011
    rgb(255,140,10),        // value 46. Recent deforestation (2007-2015), started in 2012
    rgb(255,120,10),        // value 47. Recent deforestation (2007-2015), started in 2013
    
    rgb(255,100,10), rgb(0,0,0),     rgb(0,0,0),   // value 50. Recent disturbance/deforestation (2013-2015) 
    rgb(255,60,0),           // value 51 Recent deforestation (2014-2016), started in 2014,   (red-orange) 
    rgb(255,20,0),           // value 52 Recent deforestation (2014-2016), started in 2015,   (red) 
    rgb(215,0,0),                       // value 53  OLD (Recent deforestation (2014-2016), started in 2016, with high disturbance intensity (>3))
    
    rgb(0,0,0), rgb(0,0,0),   rgb(0,0,0),  rgb(0,0,0),rgb(0,0,0),  rgb(0,0,0),   rgb(0,0,0),  // value 60. Degradation
    rgb(170,80,80),             // value 61. Short disturbance (<1 year), started in 2014
    rgb(145,90,65),            // value 62. Short disturbance (<1 year), started in 2015 
    rgb(120,95,50),             // value 63. Short disturbance (<1 year), started in 2016  rgb(255,100,100)
    
    rgb(0,0,0),    rgb(0,0,0),  rgb(0,0,0),  rgb(0,0,0),  rgb(0,0,0),     rgb(0,0,0),   rgb(0,0,0),  // value 70. Water
    rgb(0,77,168),         // value 71. Permanent Water      (dark Blue)
    rgb(0,157,200),        // value 72. Between Seasonal & Perm Water   (light Blue)
    rgb(255,20,147),        // value 73. Deforestation to Permanent Water 
    rgb(255,105,180),     // value 74. Deforestation to seasonal water 
    rgb(138,43,226),        // value 75. Deforestation to Permanent Water ONLY SAM et North Asia TEST
    rgb(138,43,226),       // value 76. Deforestation to Seasonal Water ONLY SAM et North Asia TEST
    rgb(0,0,0),   rgb(0,0,0),  rgb(0,0,0),       rgb(0,0,0),  // value 80. Plantations
    rgb(51,99,51),             // value 81. Very old Plantations or intact inside concession (green over 32y) 
    rgb(98,161,80),            // value 82. Old Plantations      (10-32y)  
    rgb(188,209,105),          // value 83. Young Plantations (3-10y) - light grey
    rgb(255,208,128),          // value 84. Plantations recently cut (2013-2015) (pink-grey)
    rgb(250,180,150),          // value 85. Plantations recently cut (2005-2013)
    rgb(204,163,163),          //val 86. Plantations disturbed 
    
    rgb(0,0,0),  rgb(0,0,0),    rgb(0,0,0),   rgb(0,0,0),  // value 90. Other LC (regular disturbances): Non-water, Non-Mangroves, Non-evergreen forest, Non-regrowth
    rgb(255,255,255),        // value 91.   Other LC: Non-forest for the 3 periods (Savanna, Deciduous forest, Agriculture...)
    rgb(255,255,255),        // value 92.   Other LC: Non-forest for the 3 periods but first disturbance started after 2000
    rgb(255,255,255),        // value 93.   Other LC: Non-forest in (1984-2006), regrowth in (2007-2013), non-forest in (2014-2016)
    rgb(209,255,115),        // value 94.   Other LC: Evergreen non-forest (shrubland, Grassland)
    
    rgb(0,0,0),  rgb(0,0,0),    rgb(0,0,0),   rgb(0,0,0),   rgb(0,0,0),   rgb(0,0,0),     // value 100. No data over at least 2 periods  (black)
    rgb(0,0,0),           // value 101  No data over the 3 periods
    rgb(0,0,0),           // value 102. No data over 1984-2013
    rgb(0,0,0),   rgb(0,0,0),      rgb(0,0,0),        rgb(0,0,0),           
    ];
      var forest_mask = ee.Image('users/andilangner/Classif33yDegrad').clip(studyarea); // Roadless map (not yet public)
      Map.addLayer (forest_mask,{min:[0],max:[106],palette: PALETTE},'Roadless map',false);
    }
    
    if (forest_mask_select === 'Hansen_map' && forest_mask_year_select === 2016){
      var Hansen_map = ee.Image("UMD/hansen/global_forest_change_2016_v1_4"); // Hansen map 2016
      var forest_mask = Hansen_map.select('treecover2000').mask(Hansen_map.select('loss').eq(0)).clip(studyarea);
      Map.addLayer (forest_mask,{min:[0],max:[100],palette:'ffffcc,006600'},'Hansen map 2016',false);
    }
    
    if (forest_mask_select === 'Hansen_map' && forest_mask_year_select === 2015){
      var Hansen_map = ee.Image("UMD/hansen/global_forest_change_2015_v1_3"); // Hansen map 2015
      var forest_mask = Hansen_map.select('treecover2000').mask(Hansen_map.select('loss').eq(0)).clip(studyarea);
      Map.addLayer (forest_mask,{min:[0],max:[100],palette:'ffffcc,006600'},'Hansen map 2015',false);
    }
    
    if (forest_mask_select === 'Hansen_map' && forest_mask_year_select === 2014){
      var Hansen_map = ee.Image("UMD/hansen/global_forest_change_2015"); // Hansen map 2014
      var forest_mask = Hansen_map.select('treecover2000').mask(Hansen_map.select('loss').eq(0)).clip(studyarea);
      Map.addLayer (forest_mask,{min:[0],max:[100],palette:'ffffcc,006600'},'Hansen map 2014',false);
    }
    
    if (forest_mask_select === 'Hansen_map' && forest_mask_year_select === 2013){
      var Hansen_map = ee.Image("UMD/hansen/global_forest_change_2014"); // Hansen map 2013
      var forest_mask = Hansen_map.select('treecover2000').mask(Hansen_map.select('loss').eq(0)).clip(studyarea);
      Map.addLayer (forest_mask,{min:[0],max:[100],palette:'ffffcc,006600'},'Hansen map 2013',false);
    }
    
    if (forest_mask_select === 'Hansen_map' && forest_mask_year_select === 2012){
      var Hansen_map = ee.Image("UMD/hansen/global_forest_change_2013"); // Hansen map 2012
      var forest_mask = Hansen_map.select('treecover2000').mask(Hansen_map.select('loss').eq(0)).clip(studyarea);
      Map.addLayer (forest_mask,{min:[0],max:[100],palette:'ffffcc,006600'},'Hansen map 2012',false);
    }
    
    
    if (Sensor === 'L8' || Sensor === 'L78'){
      var BANDS=['B5','B7','fmask','B10','BQA','B2','B3','B4','B6'];
    
      // Data preparation and cloud masking ********************************************************************************************************************
      var Imagecollection_base_TOA = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA')
      .filterDate(Start_base, End_base)
      .filterBounds(studyarea)
      // .filter(ee.Filter.neq('LANDSAT_SCENE_ID','LC82300672014276LGN00')) // Use this line (or several) to exclude scenes that are erroneous
      .map(ee.Algorithms.Landsat.simpleCloudScore)
      .select('cloud');
      var Imagecollection_base_SR = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
      .filterDate(Start_base, End_base)
      .filterBounds(studyarea)
      // .filter(ee.Filter.neq('LANDSAT_SCENE_ID','LC82300672014276LGN00')) // Use this line (or several) to exclude scenes that are erroneous;
      var Imagecollection_base_SR_TOA = joinLandsatCollections(Imagecollection_base_SR, Imagecollection_base_TOA);
      var Imagecollection_base = Imagecollection_base_SR_TOA.map(function(image){return Masking_1QB(image,cloud_buffer,BANDS,cloud_pixel_qa_select,cloud_shadow_pixel_qa_select,cloud_conf_qa_select,cirrus_conf_qa_select,SimpleCloudScore_select,UnsureClouds_select)});
    
      var Imagecollection_second_TOA = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA')
      .filterDate(Start_second, End_second)
      .filterBounds(studyarea)
      // .filter(ee.Filter.neq('LANDSAT_SCENE_ID','LC82300672014276LGN00')) // Use this line (or several) to exclude scenes that are erroneous
      .map(ee.Algorithms.Landsat.simpleCloudScore)
      .select('cloud');
      var Imagecollection_second_SR = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
      .filterDate(Start_second, End_second)
      .filterBounds(studyarea)
      // .filter(ee.Filter.neq('LANDSAT_SCENE_ID','LC82300672014276LGN00')) // Use this line (or several) to exclude scenes that are erroneous;
      var Imagecollection_second_SR_TOA = joinLandsatCollections(Imagecollection_second_SR, Imagecollection_second_TOA);
      var Imagecollection_second = Imagecollection_second_SR_TOA.map(function(image){return Masking_1QB(image,cloud_buffer,BANDS,cloud_pixel_qa_select,cloud_shadow_pixel_qa_select,cloud_conf_qa_select,cirrus_conf_qa_select,SimpleCloudScore_select,UnsureClouds_select)});
      
      // Data preparation and masking of sensor errors and non-forest areas ************************************************************************************
      var Imagecollection_base_2 = Imagecollection_base
      .map(function(image){return Masking_2(image.clip(image.geometry().
      buffer(-500)),forest_mask,hansen_treecover,forest_mask_year_select,forest_mask_select,BANDS,sensorerror_bufferdistance)}).select(['B5','B7'],['NIR','SWIR2']);
      var Imagecollection_second_2 = Imagecollection_second
      .map(function(image){return Masking_2(image.clip(image.geometry().
      buffer(-500)),forest_mask,hansen_treecover,forest_mask_year_select,forest_mask_select,BANDS,sensorerror_bufferdistance)}).select(['B5','B7'],['NIR','SWIR2']);
      
      // Calculation of single scenes of Base-NBR **************************************************************************************************************
      var NBR_Imagecollection_base = Imagecollection_base_2.map(NBR);
      
      // 'Self-referencing' or normalizatin of single scenes of Base-NBR ***************************************************************************************
      var NBR_Imagecollection_base_normal1 = NBR_Imagecollection_base.map(function(image){return Adjustment_kernel(image,kernel_size)});
      
      // Capping of self-referenced single Base-NBR scenes at 0 and -1 *****************************************************************************************
      var NBR_Imagecollection_base_normal2 = NBR_Imagecollection_base_normal1.map(Capping);
      
      // Condensation of all available self-referenced single Base-NBR scenes per investigation period *********************************************************
      var NBR_Imagecollection_base_normalized_min = NBR_Imagecollection_base_normal2.qualityMosaic('NBR');
    
      // Calculation of single scenes of Second-NBR ************************************************************************************************************
      var NBR_Imagecollection_second = Imagecollection_second_2.map(NBR);
      
      // 'Self-referencing' or normalizatin of single scenes of Second-NBR *************************************************************************************
      var NBR_Imagecollection_second_normal1 = NBR_Imagecollection_second.map(function(image){return Adjustment_kernel(image,kernel_size)});
      
      // Capping of self-referenced single Second-NBR scenes at 0 and -1 ***************************************************************************************
      var NBR_Imagecollection_second_normal2 = NBR_Imagecollection_second_normal1.map(Capping);
      
      // Condensation of all available self-referenced single Second-NBR scenes per investigation period *******************************************************
      var NBR_Imagecollection_second_normalized_min = NBR_Imagecollection_second_normal2.qualityMosaic('NBR');
    
      // Derive the Delta-NBR result ***************************************************************************************************************************
      var NBR_difference = NBR_Imagecollection_second_normalized_min.select('NBR').subtract(NBR_Imagecollection_base_normalized_min.select('NBR'));
      var NBR_difference_capped = NBR_difference.select('NBR').where(NBR_difference.select('NBR').lt(0), 0);
    
      // Display of condensed Base-NBR scene and information about the acquisition dates of the base satellite data per single pixel location ******************
      Map.addLayer (NBR_Imagecollection_base_normalized_min.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'NBR-Base L8 '+Start_base+' - '+End_base, false);
      Map.addLayer (NBR_Imagecollection_base_normalized_min.select('yearday'),{min:[Start_base.replace(/-/g,'')],max:[End_base.replace(/-/g,'')],palette:'ff0000,ffffff'},'Date-Base L8 '+Start_base+' - '+End_base, false);
    
      // Display of condensed Second-NBR scene and information about the acquisition dates of the second satellite data per single pixel location **************
      Map.addLayer (NBR_Imagecollection_second_normalized_min.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'NBR-Second L8 '+Start_second+' - '+End_second, false);
      Map.addLayer (NBR_Imagecollection_second_normalized_min.select('yearday'),{min:[Start_second.replace(/-/g,'')],max:[End_second.replace(/-/g,'')],palette:'ff0000,ffffff'},'Date-Second L8 '+Start_second+' - '+End_second, false);
    
      // Just some information regarding the used satellite data ***********************************************************************************************
      print (Imagecollection_base_2,'Base period L8: '+Start_base+' - '+End_base);
      print (Imagecollection_second_2,'Second period L8: '+Start_second+' - '+End_second);
      // *******************************************************************************************************************************************************
    
      // Prepare data for export (NoData is set to -2) *********************************************************************************************************
      var NBR_Imagecollection_base_normalized_min_Export_L8 = NBR_Imagecollection_base_normalized_min.select('NBR').unmask(-2);
      var NBR_Imagecollection_base_normalized_min_date_Export_L8 = NBR_Imagecollection_base_normalized_min.select('yearday').unmask(-2);
      var NBR_Imagecollection_second_normalized_min_Export_L8 = NBR_Imagecollection_second_normalized_min.select('NBR').unmask(-2);
      var NBR_Imagecollection_second_normalized_min_date_Export_L8 = NBR_Imagecollection_second_normalized_min.select('yearday').unmask(-2);
      var NBR_difference_Export_L8 = NBR_difference_capped.unmask(-2);  
      
      if (Sensor === 'L78'){
        Map.addLayer (NBR_difference_capped.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'DeltaNBR L8'+' '+End_second+' - '+Start_base, true);
        var NBR_difference_capped_L8 = ee.ImageCollection(NBR_difference_capped);
        // NBR_difference_capped = 0;
      }
      if (Sensor === 'L8'){
        Map.addLayer (NBR_difference_capped.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'DeltaNBR L8'+' '+End_second+' - '+Start_base, true);
        // NBR_difference_capped = 0;
      }
    }
    
    
    if (Sensor === 'L7' || Sensor === 'L78' || Sensor === 'L57'){
      var BANDS=['B4','B7','fmask','B6','B6','B1','B2','B3','B5'];
    
      // Data preparation and cloud masking ********************************************************************************************************************
      var Imagecollection_base_TOA = ee.ImageCollection('LANDSAT/LE07/C01/T1_TOA')
      .filterDate(Start_base, End_base)
      .filterBounds(studyarea)
      // .filter(ee.Filter.neq('LANDSAT_SCENE_ID','LC82300672014276LGN00')) // Use this line (or several) to exclude scenes that are erroneous
      .map(ee.Algorithms.Landsat.simpleCloudScore)
      .select('cloud');
      var Imagecollection_base_SR = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR')
      .filterDate(Start_base, End_base)
      .filterBounds(studyarea)
      // .filter(ee.Filter.neq('LANDSAT_SCENE_ID','LC82300672014276LGN00')) // Use this line (or several) to exclude scenes that are erroneous;
      var Imagecollection_base_SR_TOA = joinLandsatCollections(Imagecollection_base_SR, Imagecollection_base_TOA);
      var Imagecollection_base = Imagecollection_base_SR_TOA.map(function(image){return Masking_1(image,cloud_buffer,BANDS,cloud_pixel_qa_select,cloud_shadow_pixel_qa_select,cloud_conf_qa_select,cloud_shadow_sr_cloud_qa_select,SimpleCloudScore_select,UnsureClouds_select)});
    
      var Imagecollection_second_TOA = ee.ImageCollection('LANDSAT/LE07/C01/T1_TOA')
      .filterDate(Start_second, End_second)
      .filterBounds(studyarea)
      // .filter(ee.Filter.neq('LANDSAT_SCENE_ID','LC82300672014276LGN00')) // Use this line (or several) to exclude scenes that are erroneous
      .map(ee.Algorithms.Landsat.simpleCloudScore)
      .select('cloud');
      var Imagecollection_second_SR = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR')
      .filterDate(Start_second, End_second)
      .filterBounds(studyarea)
      // .filter(ee.Filter.neq('LANDSAT_SCENE_ID','LC82300672014276LGN00')) // Use this line (or several) to exclude scenes that are erroneous;
      var Imagecollection_second_SR_TOA = joinLandsatCollections(Imagecollection_second_SR, Imagecollection_second_TOA);
      var Imagecollection_second = Imagecollection_second_SR_TOA.map(function(image){return Masking_1(image,cloud_buffer,BANDS,cloud_pixel_qa_select,cloud_shadow_pixel_qa_select,cloud_conf_qa_select,cloud_shadow_sr_cloud_qa_select,SimpleCloudScore_select,UnsureClouds_select)});
    
      // Data preparation and masking of sensor errors and non-forest areas ************************************************************************************  
      var Imagecollection_base_2 = Imagecollection_base
      .map(function(image){return Masking_2(image.clip(image.geometry().
      buffer(-500)),forest_mask,hansen_treecover,forest_mask_year_select,forest_mask_select,BANDS,sensorerror_bufferdistance)}).select(['B4','B7'],['NIR','SWIR2']);
      var Imagecollection_second_2 = Imagecollection_second
      .map(function(image){return Masking_2(image.clip(image.geometry().
      buffer(-500)),forest_mask,hansen_treecover,forest_mask_year_select,forest_mask_select,BANDS,sensorerror_bufferdistance)}).select(['B4','B7'],['NIR','SWIR2']);
    
      // Calculation of single scenes of Base-NBR **************************************************************************************************************
      var NBR_Imagecollection_base = Imagecollection_base_2.map(NBR);
      
      // 'Self-referencing' or normalizatin of single scenes of Base-NBR ***************************************************************************************
      var NBR_Imagecollection_base_normal1 = NBR_Imagecollection_base.map(function(image){return Adjustment_kernel(image,kernel_size)});
      
      // Capping of self-referenced single Base-NBR scenes at 0 and -1 *****************************************************************************************
      var NBR_Imagecollection_base_normal2 = NBR_Imagecollection_base_normal1.map(Capping);
      
      // Condensation of all available self-referenced single Base-NBR scenes per investigation period *********************************************************
      var NBR_Imagecollection_base_normalized_min = NBR_Imagecollection_base_normal2.qualityMosaic('NBR');
    
      // Calculation of single scenes of Second-NBR ************************************************************************************************************
      var NBR_Imagecollection_second = Imagecollection_second_2.map(NBR);
      
      // 'Self-referencing' or normalizatin of single scenes of Second-NBR *************************************************************************************
      var NBR_Imagecollection_second_normal1 = NBR_Imagecollection_second.map(function(image){return Adjustment_kernel(image,kernel_size)});
      
      // Capping of self-referenced single Second-NBR scenes at 0 and -1 ***************************************************************************************
      var NBR_Imagecollection_second_normal2 = NBR_Imagecollection_second_normal1.map(Capping);
      
      // Condensation of all available self-referenced single Second-NBR scenes per investigation period *******************************************************
      var NBR_Imagecollection_second_normalized_min = NBR_Imagecollection_second_normal2.qualityMosaic('NBR');
    
      // Derive the Delta-NBR result ***************************************************************************************************************************
      var NBR_difference = NBR_Imagecollection_second_normalized_min.select('NBR').subtract(NBR_Imagecollection_base_normalized_min.select('NBR'));
      var NBR_difference_capped = NBR_difference.select('NBR').where(NBR_difference.select('NBR').lt(0), 0);
    
      // Display of condensed Base-NBR scene and information about the acquisition dates of the base satellite data per single pixel location ******************
      Map.addLayer (NBR_Imagecollection_base_normalized_min.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'NBR-Base L7 '+Start_base+' - '+End_base, false);
      Map.addLayer (NBR_Imagecollection_base_normalized_min.select('yearday'),{min:[Start_base.replace(/-/g,'')],max:[End_base.replace(/-/g,'')],palette:'ff0000,ffffff'},'Date-Base L7 '+Start_base+' - '+End_base, false);
    
      // Display of condensed Second-NBR scene and information about the acquisition dates of the second satellite data per single pixel location **************
      Map.addLayer (NBR_Imagecollection_second_normalized_min.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'NBR-Second L7 '+Start_second+' - '+End_second, false);
      Map.addLayer (NBR_Imagecollection_second_normalized_min.select('yearday'),{min:[Start_second.replace(/-/g,'')],max:[End_second.replace(/-/g,'')],palette:'ff0000,ffffff'},'Date-Second L7 '+Start_second+' - '+End_second, false);
    
      // Just some information regarding the used satellite data ***********************************************************************************************
      print (Imagecollection_base_2,'Base period L7: '+Start_base+' - '+End_base);
      print (Imagecollection_second_2,'Second period L7: '+Start_second+' - '+End_second);
      // *******************************************************************************************************************************************************
    
      // Prepare data for export (NoData is set to -2) *********************************************************************************************************
      var NBR_Imagecollection_base_normalized_min_Export_L7 = NBR_Imagecollection_base_normalized_min.select('NBR').unmask(-2);
      var NBR_Imagecollection_base_normalized_min_date_Export_L7 = NBR_Imagecollection_base_normalized_min.select('yearday').unmask(-2);
      var NBR_Imagecollection_second_normalized_min_Export_L7 = NBR_Imagecollection_second_normalized_min.select('NBR').unmask(-2);
      var NBR_Imagecollection_second_normalized_min_date_Export_L7 = NBR_Imagecollection_second_normalized_min.select('yearday').unmask(-2);
      var NBR_difference_Export_L7 = NBR_difference_capped.unmask(-2);  
    
      if (Sensor === 'L78' || Sensor === 'L57'){
       if (improve_L7 === true){
          NBR_difference_capped = NBR_difference_capped.where(NBR_difference_capped.lt(improve_threshold),0);
          var NBR_difference_capped_L7 = ee.ImageCollection(NBR_difference_capped);
          // NBR_difference_capped = 0;
        }
        if (improve_L7 === false){
          var NBR_difference_capped_L7 = ee.ImageCollection(NBR_difference_capped);
          // NBR_difference_capped = 0;
        }
        Map.addLayer (NBR_difference_capped.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'DeltaNBR L7'+' '+End_second+' - '+Start_base, true);
      }
      
      if (Sensor === 'L7'){
        if (improve_L7 === true){
          NBR_difference_capped = NBR_difference_capped.where(NBR_difference_capped.lt(improve_threshold),0);
          var NBR_difference_capped_L7 = ee.ImageCollection(NBR_difference_capped);
          // NBR_difference_capped = 0;
        }
        if (improve_L7 === false){
          var NBR_difference_capped_L7 = ee.ImageCollection(NBR_difference_capped);
          // NBR_difference_capped = 0;
        }
        Map.addLayer (NBR_difference_capped_L7.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'DeltaNBR L7'+' '+End_second+' - '+Start_base, true);
      }
    }
    
    
    if (Sensor === 'L5' || Sensor === 'L57'){
      var BANDS=['B4','B7','fmask','B6','B6','B1','B2','B3','B5'];
    
      // Data preparation and cloud masking ********************************************************************************************************************
      var Imagecollection_base_TOA = ee.ImageCollection('LANDSAT/LT05/C01/T1_TOA')
      .filterDate(Start_base, End_base)
      .filterBounds(studyarea)
      // .filter(ee.Filter.neq('LANDSAT_SCENE_ID','LC82300672014276LGN00')) // Use this line (or several) to exclude scenes that are erroneous
      .map(ee.Algorithms.Landsat.simpleCloudScore)
      .select('cloud');
      var Imagecollection_base_SR = ee.ImageCollection('LANDSAT/LT05/C01/T1_SR')
      .filterDate(Start_base, End_base)
      .filterBounds(studyarea)
      // .filter(ee.Filter.neq('LANDSAT_SCENE_ID','LC82300672014276LGN00')) // Use this line (or several) to exclude scenes that are erroneous;
      var Imagecollection_base_SR_TOA = joinLandsatCollections(Imagecollection_base_SR, Imagecollection_base_TOA);
      var Imagecollection_base = Imagecollection_base_SR_TOA.map(function(image){return Masking_1(image,cloud_buffer,BANDS,cloud_pixel_qa_select,cloud_shadow_pixel_qa_select,cloud_conf_qa_select,cloud_shadow_sr_cloud_qa_select,SimpleCloudScore_select,UnsureClouds_select)});
    
      var Imagecollection_second_TOA = ee.ImageCollection('LANDSAT/LT05/C01/T1_TOA')
      .filterDate(Start_second, End_second)
      .filterBounds(studyarea)
      // .filter(ee.Filter.neq('LANDSAT_SCENE_ID','LC82300672014276LGN00')) // Use this line (or several) to exclude scenes that are erroneous
      .map(ee.Algorithms.Landsat.simpleCloudScore)
      .select('cloud');
      var Imagecollection_second_SR = ee.ImageCollection('LANDSAT/LT05/C01/T1_SR')
      .filterDate(Start_second, End_second)
      .filterBounds(studyarea)
      // .filter(ee.Filter.neq('LANDSAT_SCENE_ID','LC82300672014276LGN00')) // Use this line (or several) to exclude scenes that are erroneous;
      var Imagecollection_second_SR_TOA = joinLandsatCollections(Imagecollection_second_SR, Imagecollection_second_TOA);
      var Imagecollection_second = Imagecollection_second_SR_TOA.map(function(image){return Masking_1(image,cloud_buffer,BANDS,cloud_pixel_qa_select,cloud_shadow_pixel_qa_select,cloud_conf_qa_select,cloud_shadow_sr_cloud_qa_select,SimpleCloudScore_select,UnsureClouds_select)});
    
      // Data preparation and masking of sensor errors and non-forest areas ************************************************************************************   
      var Imagecollection_base_2 = Imagecollection_base
      .map(function(image){return Masking_2(image.clip(image.geometry().
      buffer(-500)),forest_mask,hansen_treecover,forest_mask_year_select,forest_mask_select,BANDS,sensorerror_bufferdistance)}).select(['B4','B7'],['NIR','SWIR2']);
      var Imagecollection_second_2 = Imagecollection_second
      .map(function(image){return Masking_2(image.clip(image.geometry().
      buffer(-500)),forest_mask,hansen_treecover,forest_mask_year_select,forest_mask_select,BANDS,sensorerror_bufferdistance)}).select(['B4','B7'],['NIR','SWIR2']);
    
      // Calculation of single scenes of Base-NBR **************************************************************************************************************
      var NBR_Imagecollection_base = Imagecollection_base_2.map(NBR);
      
      // 'Self-referencing' or normalizatin of single scenes of Base-NBR ***************************************************************************************
      var NBR_Imagecollection_base_normal1 = NBR_Imagecollection_base.map(function(image){return Adjustment_kernel(image,kernel_size)});
      
      // Capping of self-referenced single Base-NBR scenes at 0 and -1 *****************************************************************************************
      var NBR_Imagecollection_base_normal2 = NBR_Imagecollection_base_normal1.map(Capping);
      
      // Condensation of all available self-referenced single Base-NBR scenes per investigation period *********************************************************
      var NBR_Imagecollection_base_normalized_min = NBR_Imagecollection_base_normal2.qualityMosaic('NBR');
    
      // Calculation of single scenes of Second-NBR ************************************************************************************************************
      var NBR_Imagecollection_second = Imagecollection_second_2.map(NBR);
      
      // 'Self-referencing' or normalizatin of single scenes of Second-NBR *************************************************************************************
      var NBR_Imagecollection_second_normal1 = NBR_Imagecollection_second.map(function(image){return Adjustment_kernel(image,kernel_size)});
      
      // Capping of self-referenced single Second-NBR scenes at 0 and -1 ***************************************************************************************
      var NBR_Imagecollection_second_normal2 = NBR_Imagecollection_second_normal1.map(Capping);
      
      // Condensation of all available self-referenced single Second-NBR scenes per investigation period *******************************************************
      var NBR_Imagecollection_second_normalized_min = NBR_Imagecollection_second_normal2.qualityMosaic('NBR');
    
      // Derive the Delta-NBR result ***************************************************************************************************************************
      var NBR_difference = NBR_Imagecollection_second_normalized_min.select('NBR').subtract(NBR_Imagecollection_base_normalized_min.select('NBR'));
      var NBR_difference_capped = NBR_difference.select('NBR').where(NBR_difference.select('NBR').lt(0), 0);
    
      // Display of condensed Base-NBR scene and information about the acquisition dates of the base satellite data per single pixel location ******************
      Map.addLayer (NBR_Imagecollection_base_normalized_min.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'NBR-Base L5 '+Start_base+' - '+End_base, false);
      Map.addLayer (NBR_Imagecollection_base_normalized_min.select('yearday'),{min:[Start_base.replace(/-/g,'')],max:[End_base.replace(/-/g,'')],palette:'ff0000,ffffff'},'Date-Base L5 '+Start_base+' - '+End_base, false);
    
      // Display of condensed Second-NBR scene and information about the acquisition dates of the second satellite data per single pixel location **************
      Map.addLayer (NBR_Imagecollection_second_normalized_min.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'NBR-Second L5 '+Start_second+' - '+End_second, false);
      Map.addLayer (NBR_Imagecollection_second_normalized_min.select('yearday'),{min:[Start_second.replace(/-/g,'')],max:[End_second.replace(/-/g,'')],palette:'ff0000,ffffff'},'Date-Second L5 '+Start_second+' - '+End_second, false);
    
      // Just some information regarding the used satellite data ***********************************************************************************************
      print (Imagecollection_base_2,'Base period L5: '+Start_base+' - '+End_base);
      print (Imagecollection_second_2,'Second period L5: '+Start_second+' - '+End_second);
      // *******************************************************************************************************************************************************
    
      // Prepare data for export (NoData is set to -2) *********************************************************************************************************
      var NBR_Imagecollection_base_normalized_min_Export_L5 = NBR_Imagecollection_base_normalized_min.select('NBR').unmask(-2);
      var NBR_Imagecollection_base_normalized_min_date_Export_L5 = NBR_Imagecollection_base_normalized_min.select('yearday').unmask(-2);
      var NBR_Imagecollection_second_normalized_min_Export_L5 = NBR_Imagecollection_second_normalized_min.select('NBR').unmask(-2);
      var NBR_Imagecollection_second_normalized_min_date_Export_L5 = NBR_Imagecollection_second_normalized_min.select('yearday').unmask(-2);
      var NBR_difference_Export_L5 = NBR_difference_capped.unmask(-2);  
    
      if (Sensor === 'L57'){
        Map.addLayer (NBR_difference_capped.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'DeltaNBR L5'+' '+End_second+' - '+Start_base, true);
        var NBR_difference_capped_L5 = ee.ImageCollection(NBR_difference_capped);
        // NBR_difference_capped = 0;
      }
      
      if (Sensor === 'L5'){
        Map.addLayer (NBR_difference_capped.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'DeltaNBR L5'+' '+End_second+' - '+Start_base, true);
        // NBR_difference_capped = 0;
      }
    }
    
    
    if (Sensor === 'L4' || Sensor === 'L45'){
      var BANDS=['B4','B7','fmask','B6','B6','B1','B2','B3','B5'];
    
      // Data preparation and cloud masking ********************************************************************************************************************
      var Imagecollection_base_TOA = ee.ImageCollection('LANDSAT/LT04/C01/T1_TOA')
      .filterDate(Start_base, End_base)
      .filterBounds(studyarea)
      // .filter(ee.Filter.neq('LANDSAT_SCENE_ID','LC82300672014276LGN00')) // Use this line (or several) to exclude scenes that are erroneous
      .map(ee.Algorithms.Landsat.simpleCloudScore)
      .select('cloud');
      var Imagecollection_base_SR = ee.ImageCollection('LANDSAT/LT04/C01/T1_SR')
      .filterDate(Start_base, End_base)
      .filterBounds(studyarea)
      // .filter(ee.Filter.neq('LANDSAT_SCENE_ID','LC82300672014276LGN00')) // Use this line (or several) to exclude scenes that are erroneous;
      var Imagecollection_base_SR_TOA = joinLandsatCollections(Imagecollection_base_SR, Imagecollection_base_TOA);
      var Imagecollection_base = Imagecollection_base_SR_TOA.map(function(image){return Masking_1(image,cloud_buffer,BANDS,cloud_pixel_qa_select,cloud_shadow_pixel_qa_select,cloud_conf_qa_select,cloud_shadow_sr_cloud_qa_select,SimpleCloudScore_select,UnsureClouds_select)});
    
      var Imagecollection_second_TOA = ee.ImageCollection('LANDSAT/LT04/C01/T1_TOA')
      .filterDate(Start_second, End_second)
      .filterBounds(studyarea)
      // .filter(ee.Filter.neq('LANDSAT_SCENE_ID','LC82300672014276LGN00')) // Use this line (or several) to exclude scenes that are erroneous
      .map(ee.Algorithms.Landsat.simpleCloudScore)
      .select('cloud');
      var Imagecollection_second_SR = ee.ImageCollection('LANDSAT/LT04/C01/T1_SR')
      .filterDate(Start_second, End_second)
      .filterBounds(studyarea)
      // .filter(ee.Filter.neq('LANDSAT_SCENE_ID','LC82300672014276LGN00')) // Use this line (or several) to exclude scenes that are erroneous;
      var Imagecollection_second_SR_TOA = joinLandsatCollections(Imagecollection_second_SR, Imagecollection_second_TOA);
      var Imagecollection_second = Imagecollection_second_SR_TOA.map(function(image){return Masking_1(image,cloud_buffer,BANDS,cloud_pixel_qa_select,cloud_shadow_pixel_qa_select,cloud_conf_qa_select,cloud_shadow_sr_cloud_qa_select,SimpleCloudScore_select,UnsureClouds_select)});
    
      // Data preparation and masking of sensor errors and non-forest areas ************************************************************************************   
      var Imagecollection_base_2 = Imagecollection_base
      .map(function(image){return Masking_2(image.clip(image.geometry().
      buffer(-500)),forest_mask,hansen_treecover,forest_mask_year_select,forest_mask_select,BANDS,sensorerror_bufferdistance)}).select(['B4','B7'],['NIR','SWIR2']);
      var Imagecollection_second_2 = Imagecollection_second
      .map(function(image){return Masking_2(image.clip(image.geometry().
      buffer(-500)),forest_mask,hansen_treecover,forest_mask_year_select,forest_mask_select,BANDS,sensorerror_bufferdistance)}).select(['B4','B7'],['NIR','SWIR2']);
    
      // Calculation of single scenes of Base-NBR **************************************************************************************************************
      var NBR_Imagecollection_base = Imagecollection_base_2.map(NBR);
      
      // 'Self-referencing' or normalizatin of single scenes of Base-NBR ***************************************************************************************
      var NBR_Imagecollection_base_normal1 = NBR_Imagecollection_base.map(function(image){return Adjustment_kernel(image,kernel_size)});
      
      // Capping of self-referenced single Base-NBR scenes at 0 and -1 *****************************************************************************************
      var NBR_Imagecollection_base_normal2 = NBR_Imagecollection_base_normal1.map(Capping);
      
      // Condensation of all available self-referenced single Base-NBR scenes per investigation period *********************************************************
      var NBR_Imagecollection_base_normalized_min = NBR_Imagecollection_base_normal2.qualityMosaic('NBR');
    
      // Calculation of single scenes of Second-NBR ************************************************************************************************************
      var NBR_Imagecollection_second = Imagecollection_second_2.map(NBR);
      
      // 'Self-referencing' or normalizatin of single scenes of Second-NBR *************************************************************************************
      var NBR_Imagecollection_second_normal1 = NBR_Imagecollection_second.map(function(image){return Adjustment_kernel(image,kernel_size)});
      
      // Capping of self-referenced single Second-NBR scenes at 0 and -1 ***************************************************************************************
      var NBR_Imagecollection_second_normal2 = NBR_Imagecollection_second_normal1.map(Capping);
      
      // Condensation of all available self-referenced single Second-NBR scenes per investigation period *******************************************************
      var NBR_Imagecollection_second_normalized_min = NBR_Imagecollection_second_normal2.qualityMosaic('NBR');
    
      // Derive the Delta-NBR result ***************************************************************************************************************************
      var NBR_difference = NBR_Imagecollection_second_normalized_min.select('NBR').subtract(NBR_Imagecollection_base_normalized_min.select('NBR'));
      var NBR_difference_capped = NBR_difference.select('NBR').where(NBR_difference.select('NBR').lt(0), 0);
    
      // Display of condensed Base-NBR scene and information about the acquisition dates of the base satellite data per single pixel location ******************
      Map.addLayer (NBR_Imagecollection_base_normalized_min.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'NBR-Base L4 '+Start_base+' - '+End_base, false);
      Map.addLayer (NBR_Imagecollection_base_normalized_min.select('yearday'),{min:[Start_base.replace(/-/g,'')],max:[End_base.replace(/-/g,'')],palette:'ff0000,ffffff'},'Date-Base L4 '+Start_base+' - '+End_base, false);
    
      // Display of condensed Second-NBR scene and information about the acquisition dates of the second satellite data per single pixel location **************
      Map.addLayer (NBR_Imagecollection_second_normalized_min.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'NBR-Second L4 '+Start_second+' - '+End_second, false);
      Map.addLayer (NBR_Imagecollection_second_normalized_min.select('yearday'),{min:[Start_second.replace(/-/g,'')],max:[End_second.replace(/-/g,'')],palette:'ff0000,ffffff'},'Date-Second L4 '+Start_second+' - '+End_second, false);
    
      // Just some information regarding the used satellite data ***********************************************************************************************
      print (Imagecollection_base_2,'Base period L5: '+Start_base+' - '+End_base);
      print (Imagecollection_second_2,'Second period L5: '+Start_second+' - '+End_second);
      // *******************************************************************************************************************************************************
    
      // Prepare data for export (NoData is set to -2) *********************************************************************************************************
      var NBR_Imagecollection_base_normalized_min_Export_L4 = NBR_Imagecollection_base_normalized_min.select('NBR').unmask(-2);
      var NBR_Imagecollection_base_normalized_min_date_Export_L4 = NBR_Imagecollection_base_normalized_min.select('yearday').unmask(-2);
      var NBR_Imagecollection_second_normalized_min_Export_L4 = NBR_Imagecollection_second_normalized_min.select('NBR').unmask(-2);
      var NBR_Imagecollection_second_normalized_min_date_Export_L4 = NBR_Imagecollection_second_normalized_min.select('yearday').unmask(-2);
      var NBR_difference_Export_L4 = NBR_difference_capped.unmask(-2);  
    
      if (Sensor === 'L45'){
        Map.addLayer (NBR_difference_capped.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'DeltaNBR L4'+' '+End_second+' - '+Start_base, true);
        var NBR_difference_capped_L4 = ee.ImageCollection(NBR_difference_capped);
        // NBR_difference_capped = 0;
      }
      
      if (Sensor === 'L4'){
        Map.addLayer (NBR_difference_capped.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'DeltaNBR L4'+' '+End_second+' - '+Start_base, true);
        // NBR_difference_capped = 0;
      }
    }
    
    
    if (Sensor === 'L78'){
        var NBR_difference_capped_L78 = ee.ImageCollection(NBR_difference_capped_L7.merge(NBR_difference_capped_L8));
        var NBR_difference_capped = NBR_difference_capped_L78.qualityMosaic('NBR');
        Map.addLayer (NBR_difference_capped.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'DeltaNBR '+Sensor+' '+End_second+' - '+Start_base, true);
        // Prepare data for export (NoData is set to -2) *******************************************************************************************************
        var NBR_difference_Export_L78 = NBR_difference_capped.unmask(-2);
    } 
    
    if (Sensor === 'L57'){
        var NBR_difference_capped_L57 = ee.ImageCollection(NBR_difference_capped_L5.merge(NBR_difference_capped_L7))
        var NBR_difference_capped = NBR_difference_capped_L57.qualityMosaic('NBR');
        Map.addLayer (NBR_difference_capped.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'DeltaNBR '+Sensor+' '+End_second+' - '+Start_base, true);
        // Prepare data for export (NoData is set to -2) *******************************************************************************************************
        var NBR_difference_Export_L57 = NBR_difference_capped.unmask(-2);
    } 
    
    if (Sensor === 'L45'){
        var NBR_difference_capped_L45 = ee.ImageCollection(NBR_difference_capped_L4.merge(NBR_difference_capped_L5))
        var NBR_difference_capped = NBR_difference_capped_L45.qualityMosaic('NBR');
        Map.addLayer (NBR_difference_capped.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'DeltaNBR '+Sensor+' '+End_second+' - '+Start_base, true);
        // Prepare data for export (NoData is set to -2) *******************************************************************************************************
        var NBR_difference_Export_L45 = NBR_difference_capped.unmask(-2);
    } 
    
    if (Sensor === 'L7'){
        var NBR_difference_capped_L7improved = ee.ImageCollection(NBR_difference_capped_L7);
        var NBR_difference_capped = NBR_difference_capped_L7improved.qualityMosaic('NBR');
        // Map.addLayer (NBR_difference_capped.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'DeltaNBR '+Sensor+' '+End_second+' - '+Start_base, false);
        // Prepare data for export (NoData is set to -2) *******************************************************************************************************
        var NBR_difference_Export_L7 = NBR_difference_capped.unmask(-2);
    }
    
    
    if (Sensor === 'S2'){
      var BANDS=['B2','B8','B9','B11','B12','B3','B4','B5','B6'];
    
      // Data preparation and cloud masking ********************************************************************************************************************
      var Imagecollection_base = ee.ImageCollection('COPERNICUS/S2')
      .filterDate(Start_base, End_base)
      .filterBounds(studyarea)
      .map(function(image){return Masking_S2_1(image,cloud_buffer,BANDS)});
      var Imagecollection_second = ee.ImageCollection('COPERNICUS/S2')
      .filterDate(Start_second, End_second)
      .filterBounds(studyarea)
      .map(function(image){return Masking_S2_1(image,cloud_buffer,BANDS)});
      
      // Data preparation and masking of sensor errors and non-forest areas ************************************************************************************
      var Imagecollection_base_2 = Imagecollection_base
      .map(function(image){return Masking_2(image.clip(image.geometry().
      buffer(-500)),forest_mask,hansen_treecover,forest_mask_year_select,forest_mask_select,BANDS,sensorerror_bufferdistance)}).select(['B8','B12'],['NIR','SWIR2']);
      var Imagecollection_second_2 = Imagecollection_second
      .map(function(image){return Masking_2(image.clip(image.geometry().
      buffer(-500)),forest_mask,hansen_treecover,forest_mask_year_select,forest_mask_select,BANDS,sensorerror_bufferdistance)}).select(['B8','B12'],['NIR','SWIR2']);
    
      // Calculation of single scenes of Base-NBR **************************************************************************************************************
      var NBR_Imagecollection_base = Imagecollection_base_2.map(NBR);
      
      // 'Self-referencing' or normalizatin of single scenes of Base-NBR ***************************************************************************************
      var NBR_Imagecollection_base_normal1 = NBR_Imagecollection_base.map(function(image){return Adjustment_kernel(image,kernel_size)});
      
      // Capping of self-referenced single Base-NBR scenes at 0 and -1 *****************************************************************************************
      var NBR_Imagecollection_base_normal2 = NBR_Imagecollection_base_normal1.map(Capping);
      
      // Condensation of all available self-referenced single Base-NBR scenes per investigation period *********************************************************
      var NBR_Imagecollection_base_normalized_min = NBR_Imagecollection_base_normal2.qualityMosaic('NBR');
    
      // Calculation of single scenes of Second-NBR ************************************************************************************************************
      var NBR_Imagecollection_second = Imagecollection_second_2.map(NBR);
      
      // 'Self-referencing' or normalizatin of single scenes of Second-NBR *************************************************************************************
      var NBR_Imagecollection_second_normal1 = NBR_Imagecollection_second.map(function(image){return Adjustment_kernel(image,kernel_size)});
      
      // Capping of self-referenced single Second-NBR scenes at 0 and -1 ***************************************************************************************
      var NBR_Imagecollection_second_normal2 = NBR_Imagecollection_second_normal1.map(Capping);
      
      // Condensation of all available self-referenced single Second-NBR scenes per investigation period *******************************************************
      var NBR_Imagecollection_second_normalized_min = NBR_Imagecollection_second_normal2.qualityMosaic('NBR');
    
      // Derive the Delta-NBR result ***************************************************************************************************************************
      var NBR_difference = NBR_Imagecollection_second_normalized_min.select('NBR').subtract(NBR_Imagecollection_base_normalized_min.select('NBR'));
      var NBR_difference_capped = NBR_difference.select('NBR').where(NBR_difference.select('NBR').lt(0), 0);
    
      // Display of condensed Base-NBR scene and information about the acquisition dates of the base satellite data per single pixel location ******************
      Map.addLayer (NBR_Imagecollection_base_normalized_min.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'NBR-Base S2 '+Start_base+' - '+End_base, false);
      Map.addLayer (NBR_Imagecollection_base_normalized_min.select('yearday'),{min:[Start_base.replace(/-/g,'')],max:[End_base.replace(/-/g,'')],palette:'ff0000,ffffff'},'Date-Base S2 '+Start_base+' - '+End_base, false);
    
      // Display of condensed Second-NBR scene and information about the acquisition dates of the second satellite data per single pixel location **************
      Map.addLayer (NBR_Imagecollection_second_normalized_min.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'NBR-Second S2 '+Start_second+' - '+End_second, false);
      Map.addLayer (NBR_Imagecollection_second_normalized_min.select('yearday'),{min:[Start_second.replace(/-/g,'')],max:[End_second.replace(/-/g,'')],palette:'ff0000,ffffff'},'Date-Second S2 '+Start_second+' - '+End_second, false);
    
      // Display the Delta-NBR result **************************************************************************************************************************
      Map.addLayer (NBR_difference_capped.select('NBR'),{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'DeltaNBR S2 '+End_second+' - '+Start_base, true);
    
      // Just some information regarding the used satellite data ***********************************************************************************************
      print (Imagecollection_base_2,'Base period S2: '+Start_base+' - '+End_base);
      print (Imagecollection_second_2,'Second period S2: '+Start_second+' - '+End_second);
      // *******************************************************************************************************************************************************
    
      // Prepare data for export (NoData is set to -2) *********************************************************************************************************
      var NBR_Imagecollection_base_normalized_min_Export_S2 = NBR_Imagecollection_base_normalized_min.select('NBR').unmask(-2);
      var NBR_Imagecollection_base_normalized_min_date_Export_S2 = NBR_Imagecollection_base_normalized_min.select('yearday').unmask(-2);
      var NBR_Imagecollection_second_normalized_min_Export_S2 = NBR_Imagecollection_second_normalized_min.select('NBR').unmask(-2);
      var NBR_Imagecollection_second_normalized_min_date_Export_S2 = NBR_Imagecollection_second_normalized_min.select('yearday').unmask(-2);
      var NBR_difference_Export_S2 = NBR_difference_capped.unmask(-2);
    }
    
    
    // Possible cleaning of the final Delta-NBR result ********************************************************************************************************
    if (cleaning_select === true){
      var NBR_difference_capped_1 = NBR_difference_capped.where(NBR_difference_capped.lt(threshold_conservative),0).and((NBR_difference_capped.where(NBR_difference_capped.gte(threshold_conservative),1)));
      var NBR_difference_capped_2 = NBR_difference_capped_1.reduceNeighborhood({
        reducer: ee.Reducer.sum().unweighted(),
        kernel: ee.Kernel.circle(kernel_clean_size,'meters'),
      })
      var NBR_difference_capped_3 = NBR_difference_capped.where(NBR_difference_capped_2.gte(min_disturbances),1).and((NBR_difference_capped.where(NBR_difference_capped_2.lt(min_disturbances),0))).unmask(-2);
      var NBR_difference_capped_4 = NBR_difference_capped_3.multiply(NBR_difference_capped);
      var NBR_difference_Export_cleaned = NBR_difference_capped_4.unmask(-2);
      
      // Display the cleaned Delta-NBR result
      Map.addLayer (NBR_difference_capped_4,{min:[0],max:[0.3],palette:'D3D3D3,Ce0f0f'},'DeltaNBR cleaned '+Sensor+' '+End_second+' - '+Start_base, true);
    }
    
    
    // *********************************************************************************************************************************************************
    // Export of results ***************************************************************************************************************************************
    // *********************************************************************************************************************************************************
    
    if (export_select === true){
    
      // Make a collection of the information that will be exported to a CSV file
      var features = ee.FeatureCollection([
        ee.Feature(null, {name: '*************************************************'}),
        ee.Feature(null, {name: '*************************************************'}),
        ee.Feature(null, {name: 'Investigation periods:'}),
        ee.Feature(null, {name: 'Start_base: '+Start_base}),
        ee.Feature(null, {name: 'End_base: '+End_base}),
        ee.Feature(null, {name: 'Start_second: '+Start_second}),
        ee.Feature(null, {name: 'End_second: '+End_second}),
        ee.Feature(null, {name: '*************************************************'}),
        ee.Feature(null, {name: 'Sensor selection:'}),
        ee.Feature(null, {name: 'Sensor: '+Sensor}),
        ee.Feature(null, {name: 'improve_L7: '+improve_L7}),
        ee.Feature(null, {name: 'improve_threshold: '+improve_threshold}),
        ee.Feature(null, {name: '*************************************************'}),
        ee.Feature(null, {name: 'Geographic area analyzed:'}),
        ee.Feature(null, {name: 'countryname: '+countryname}),
        ee.Feature(null, {name: 'AOI: '+AOI_select}),
        ee.Feature(null, {name: 'center: '+center}),
        ee.Feature(null, {name: '*************************************************'}),
        ee.Feature(null, {name: 'cloud masking:'}),
        ee.Feature(null, {name: 'cloud_pixel_qa_select: '+cloud_pixel_qa_select}),
        ee.Feature(null, {name: 'cloud_shadow_pixel_qa_select: '+cloud_shadow_pixel_qa_select}),
        ee.Feature(null, {name: 'cloud_conf_qa_select: '+cloud_conf_qa_select}),
        ee.Feature(null, {name: 'cloud_shadow_sr_cloud_qa_select: '+cloud_shadow_sr_cloud_qa_select}),
        ee.Feature(null, {name: 'cirrus_conf_qa_select: '+cirrus_conf_qa_select}),
        ee.Feature(null, {name: 'SimpleCloudScore_select: '+SimpleCloudScore_select}),
        ee.Feature(null, {name: 'UnsureClouds_select: '+UnsureClouds_select}),
        ee.Feature(null, {name: 'cloud_buffer: '+cloud_buffer}),
        ee.Feature(null, {name: '*************************************************'}),
        ee.Feature(null, {name: 'Forest masks:'}),
        ee.Feature(null, {name: 'forest_mask_select: '+forest_mask_select}),
        ee.Feature(null, {name: 'forest_mask_year_select: '+forest_mask_year_select}),
        ee.Feature(null, {name: 'hansen_treecover: '+hansen_treecover}),
        ee.Feature(null, {name: '*************************************************'}),
        ee.Feature(null, {name: 'Self-referencing:'}),
        ee.Feature(null, {name: 'kernel_size: '+kernel_size}),
        ee.Feature(null, {name: '*************************************************'}),
        ee.Feature(null, {name: '(Disturbance-density-related) filtering:'}),
        ee.Feature(null, {name: 'cleaning_select: '+cleaning_select}),
        ee.Feature(null, {name: 'export_file: '+'DeltaNBR_all_cleaned_'+countryname.replace(/ /g,'')+'_'+End_second+'--'+Start_base}), 
        ee.Feature(null, {name: 'threshold_conservative: '+threshold_conservative}),
        ee.Feature(null, {name: 'kernel_clean_size: '+kernel_clean_size}),
        ee.Feature(null, {name: 'min_disturbances: '+min_disturbances}),
        ee.Feature(null, {name: '*************************************************'}),
        ee.Feature(null, {name: 'Export option:'}),
        ee.Feature(null, {name: 'export_select: '+export_select}),
        ee.Feature(null, {name: 'export_file: '+'DeltaNBR_[sensor(s)]_'+countryname.replace(/ /g,'')+'_'+End_second+'--'+Start_base}),    
        ee.Feature(null, {name: 'export_select_singleNBRs: '+export_select_singleNBRs}),
        ee.Feature(null, {name: 'export_select_singleNBRdates: '+export_select_singleNBRdates}),
        ee.Feature(null, {name: '*************************************************'}),
        ee.Feature(null, {name: '*************************************************'}),
      ]);
      
      Export.table.toDrive({
        collection: features,
        description:'Report_DeltaNBR-session_'+countryname.replace(/ /g,'')+'_'+End_second+'--'+Start_base,
        fileFormat: 'CSV'
      });
    
      for (var x = 0 ; x < Delta_X ; x++) {
        for (var y = 0 ; y < Delta_Y ; y++) {
          var x_lower_left = (x) + min_X;
          var y_lower_left = (y) + min_Y;
          var x_higher_right = (x) + min_X+1;
          var y_higher_right = (y) + min_Y+1;
        
          var region = ee.FeatureCollection(ee.Geometry.Rectangle(x_lower_left, y_lower_left, x_higher_right, y_higher_right));
          var region_intersect = region.filterBounds(country);
         
          if (region_intersect.size().getInfo() > 0){
            Map.addLayer(region_intersect,{},'Exportbox'+'_'+x+'-'+y,false);
            if (Sensor === 'L8' || Sensor === 'L78'){
              Export.image.toDrive({
                image: NBR_difference_Export_L8,
                description: 'DeltaNBR_L8_'+countryname.replace(/ /g,'')+'_'+End_second+'--'+Start_base+'__'+x+'-'+y,
                scale: 30,
                maxPixels: 1e13,
                shardSize: 32,
                region: region_intersect 
              })
              if (export_select_singleNBRs === true){
                Export.image.toDrive({
                  image: NBR_Imagecollection_base_normalized_min_Export_L8,
                  description: 'NBR_base_L8_'+countryname.replace(/ /g,'')+'_'+Start_base+'--'+End_base+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
                Export.image.toDrive({
                  image: NBR_Imagecollection_second_normalized_min_Export_L8,
                  description: 'NBR_second_L8_'+countryname.replace(/ /g,'')+'_'+Start_second+'--'+End_second+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
              }
              if (export_select_singleNBRdates === true){
                Export.image.toDrive({
                  image: NBR_Imagecollection_base_normalized_min_date_Export_L8,
                  description: 'Date_base_L8_'+countryname.replace(/ /g,'')+'_'+Start_base+'--'+End_base+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
                Export.image.toDrive({
                  image: NBR_Imagecollection_second_normalized_min_date_Export_L8,
                  description: 'Date_second_L8_'+countryname.replace(/ /g,'')+'_'+Start_second+'--'+End_second+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
              }
            }
            if (Sensor === 'L7' || Sensor === 'L78' || Sensor === 'L57'){
              Export.image.toDrive({
                image: NBR_difference_Export_L7,
                description: 'DeltaNBR_L7_'+countryname.replace(/ /g,'')+'_'+End_second+'--'+Start_base+'__'+x+'-'+y,
                scale: 30,
                maxPixels: 1e13,
                shardSize: 32,
                region: region_intersect 
              })
              if (export_select_singleNBRs === true){
                Export.image.toDrive({
                  image: NBR_Imagecollection_base_normalized_min_Export_L7,
                  description: 'NBR_base_L7_'+countryname.replace(/ /g,'')+'_'+Start_base+'--'+End_base+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
                Export.image.toDrive({
                  image: NBR_Imagecollection_second_normalized_min_Export_L7,
                  description: 'NBR_second_L7_'+countryname.replace(/ /g,'')+'_'+Start_second+'--'+End_second+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
              }
              if (export_select_singleNBRdates === true){
                Export.image.toDrive({
                  image: NBR_Imagecollection_base_normalized_min_date_Export_L7,
                  description: 'Date_base_L7_'+countryname.replace(/ /g,'')+'_'+Start_base+'--'+End_base+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
                Export.image.toDrive({
                  image: NBR_Imagecollection_second_normalized_min_date_Export_L7,
                  description: 'Date_second_L7_'+countryname.replace(/ /g,'')+'_'+Start_second+'--'+End_second+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
              }
            }
            if (Sensor === 'L5' || Sensor === 'L57'){
              Export.image.toDrive({
                image: NBR_difference_Export_L5,
                description: 'DeltaNBR_L5_'+countryname.replace(/ /g,'')+'_'+End_second+'--'+Start_base+'__'+x+'-'+y,
                scale: 30,
                maxPixels: 1e13,
                shardSize: 32,
                region: region_intersect 
              })
              if (export_select_singleNBRs === true){
                Export.image.toDrive({
                  image: NBR_Imagecollection_base_normalized_min_Export_L5,
                  description: 'NBR_base_L5_'+countryname.replace(/ /g,'')+'_'+Start_base+'--'+End_base+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
                Export.image.toDrive({
                  image: NBR_Imagecollection_second_normalized_min_Export_L5,
                  description: 'NBR_second_L5_'+countryname.replace(/ /g,'')+'_'+Start_second+'--'+End_second+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
              }
              if (export_select_singleNBRdates === true){
                Export.image.toDrive({
                  image: NBR_Imagecollection_base_normalized_min_date_Export_L5,
                  description: 'Date_base_L5_'+countryname.replace(/ /g,'')+'_'+Start_base+'--'+End_base+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
                Export.image.toDrive({
                  image: NBR_Imagecollection_second_normalized_min_date_Export_L5,
                  description: 'Date_second_L5_'+countryname.replace(/ /g,'')+'_'+Start_second+'--'+End_second+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
              }
            }
            if (Sensor === 'L4' || Sensor === 'L45'){
              Export.image.toDrive({
                image: NBR_difference_Export_L4,
                description: 'DeltaNBR_L4_'+countryname.replace(/ /g,'')+'_'+End_second+'--'+Start_base+'__'+x+'-'+y,
                scale: 30,
                maxPixels: 1e13,
                shardSize: 32,
                region: region_intersect 
              })
              if (export_select_singleNBRs === true){
                Export.image.toDrive({
                  image: NBR_Imagecollection_base_normalized_min_Export_L4,
                  description: 'NBR_base_L4_'+countryname.replace(/ /g,'')+'_'+Start_base+'--'+End_base+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
                Export.image.toDrive({
                  image: NBR_Imagecollection_second_normalized_min_Export_L4,
                  description: 'NBR_second_L4_'+countryname.replace(/ /g,'')+'_'+Start_second+'--'+End_second+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
              }
              if (export_select_singleNBRdates === true){
                Export.image.toDrive({
                  image: NBR_Imagecollection_base_normalized_min_date_Export_L4,
                  description: 'Date_base_L4_'+countryname.replace(/ /g,'')+'_'+Start_base+'--'+End_base+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
                Export.image.toDrive({
                  image: NBR_Imagecollection_second_normalized_min_date_Export_L4,
                  description: 'Date_second_L4_'+countryname.replace(/ /g,'')+'_'+Start_second+'--'+End_second+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
              }
            }
            if (Sensor === 'L78'){
              Export.image.toDrive({
                image: NBR_difference_Export_L78,
                description: 'DeltaNBR_L78_'+countryname.replace(/ /g,'')+'_'+End_second+'--'+Start_base+'__'+x+'-'+y,
                scale: 30,
                maxPixels: 1e13,
                shardSize: 32,
                region: region_intersect 
              })
            }
            if (Sensor === 'L57'){
                Export.image.toDrive({
                image: NBR_difference_Export_L57,
                description: 'DeltaNBR_L57_'+countryname.replace(/ /g,'')+'_'+End_second+'--'+Start_base+'__'+x+'-'+y,
                scale: 30,
                maxPixels: 1e13,
                shardSize: 32,
                region: region_intersect 
              })
            }
            if (Sensor === 'L45'){
                Export.image.toDrive({
                image: NBR_difference_Export_L45,
                description: 'DeltaNBR_L45_'+countryname.replace(/ /g,'')+'_'+End_second+'--'+Start_base+'__'+x+'-'+y,
                scale: 30,
                maxPixels: 1e13,
                shardSize: 32,
                region: region_intersect 
              })
            }
            if (Sensor === 'S2'){
              Export.image.toDrive({
                image: NBR_difference_Export_S2,
                description: 'DeltaNBR_S2_'+countryname.replace(/ /g,'')+'_'+End_second+'--'+Start_base+'__'+x+'-'+y,
                scale: 30,
                maxPixels: 1e13,
                shardSize: 32,
                region: region_intersect 
              })
              if (export_select_singleNBRs === true){
                Export.image.toDrive({
                  image: NBR_Imagecollection_base_normalized_min_Export_S2,
                  description: 'NBR_base_S2_'+countryname.replace(/ /g,'')+'_'+Start_base+'--'+End_base+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
                Export.image.toDrive({
                  image: NBR_Imagecollection_second_normalized_min_Export_S2,
                  description: 'NBR_second_S2_'+countryname.replace(/ /g,'')+'_'+Start_second+'--'+End_second+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
              }
              if (export_select_singleNBRdates === true){
                Export.image.toDrive({
                  image: NBR_Imagecollection_base_normalized_min_date_Export_S2,
                  description: 'Date_base_S2_'+countryname.replace(/ /g,'')+'_'+Start_base+'--'+End_base+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
                Export.image.toDrive({
                  image: NBR_Imagecollection_second_normalized_min_date_Export_S2,
                  description: 'Date_second_S2_'+countryname.replace(/ /g,'')+'_'+Start_second+'--'+End_second+'__'+x+'-'+y,
                  scale: 30,
                  maxPixels: 1e13,
                  shardSize: 32,
                  region: region_intersect
                });
              }
            }
            if (cleaning_select === true){
              Export.image.toDrive({
                image: NBR_difference_Export_cleaned,
                description: 'DeltaNBR_all_cleaned_'+countryname.replace(/ /g,'')+'_'+End_second+'--'+Start_base+'__'+x+'-'+y,
                scale: 30,
                maxPixels: 1e13,
                shardSize: 32,
                region: region_intersect
              });
            }
          }
        }
      }
    }

});

// *********************************************************************************************************************************************************
// ******************************************************************* END *********************************************************************************
// *********************************************************************************************************************************************************

